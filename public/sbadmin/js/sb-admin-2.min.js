/*!
 * Start Bootstrap - SB Admin 2 v4.1.3 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */

!(function (l) {
    "use strict";
    l("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
        l("body").toggleClass("sidebar-toggled"),
            l(".sidebar").toggleClass("toggled"),
            l(".sidebar").hasClass("toggled") &&
                l(".sidebar .collapse").collapse("hide");
    }),
        l(window).resize(function () {
            l(window).width() < 768 && l(".sidebar .collapse").collapse("hide"),
                l(window).width() < 480 &&
                    !l(".sidebar").hasClass("toggled") &&
                    (l("body").addClass("sidebar-toggled"),
                    l(".sidebar").addClass("toggled"),
                    l(".sidebar .collapse").collapse("hide"));
        }),
        l("body.fixed-nav .sidebar").on(
            "mousewheel DOMMouseScroll wheel",
            function (e) {
                var o;
                768 < l(window).width() &&
                    ((o = (o = e.originalEvent).wheelDelta || -o.detail),
                    (this.scrollTop += 30 * (o < 0 ? 1 : -1)),
                    e.preventDefault());
            }
        ),
        l(document).on("scroll", function () {
            100 < l(this).scrollTop()
                ? l(".scroll-to-top").fadeIn()
                : l(".scroll-to-top").fadeOut();
        }),
        l(document).on("click", "a.scroll-to-top", function (e) {
            var o = l(this);
            l("html, body")
                .stop()
                .animate(
                    { scrollTop: l(o.attr("href")).offset().top },
                    1e3,
                    "easeInOutExpo"
                ),
                e.preventDefault();
        });
})(jQuery);

(function ($) {
    "use strict";

    var DISALLOWED_ATTRIBUTES = ["sanitize", "whiteList", "sanitizeFn"];

    var uriAttrs = [
        "background",
        "cite",
        "href",
        "itemtype",
        "longdesc",
        "poster",
        "src",
        "xlink:href",
    ];

    var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;

    var DefaultWhitelist = {
        // Global attributes allowed on any supplied element below.
        "*": [
            "class",
            "dir",
            "id",
            "lang",
            "role",
            "tabindex",
            "style",
            ARIA_ATTRIBUTE_PATTERN,
        ],
        a: ["target", "href", "title", "rel"],
        area: [],
        b: [],
        br: [],
        col: [],
        code: [],
        div: [],
        em: [],
        hr: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        i: [],
        img: ["src", "alt", "title", "width", "height"],
        li: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        u: [],
        ul: [],
    };

    /**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */
    var SAFE_URL_PATTERN =
        /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;

    /**
     * A pattern that matches safe data URLs. Only matches image, video and audio types.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */
    var DATA_URL_PATTERN =
        /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

    function allowedAttribute(attr, allowedAttributeList) {
        var attrName = attr.nodeName.toLowerCase();

        if ($.inArray(attrName, allowedAttributeList) !== -1) {
            if ($.inArray(attrName, uriAttrs) !== -1) {
                return Boolean(
                    attr.nodeValue.match(SAFE_URL_PATTERN) ||
                        attr.nodeValue.match(DATA_URL_PATTERN)
                );
            }

            return true;
        }

        var regExp = $(allowedAttributeList).filter(function (index, value) {
            return value instanceof RegExp;
        });

        // Check if a regular expression validates the attribute.
        for (var i = 0, l = regExp.length; i < l; i++) {
            if (attrName.match(regExp[i])) {
                return true;
            }
        }

        return false;
    }

    function sanitizeHtml(unsafeElements, whiteList, sanitizeFn) {
        if (sanitizeFn && typeof sanitizeFn === "function") {
            return sanitizeFn(unsafeElements);
        }

        var whitelistKeys = Object.keys(whiteList);

        for (var i = 0, len = unsafeElements.length; i < len; i++) {
            var elements = unsafeElements[i].querySelectorAll("*");

            for (var j = 0, len2 = elements.length; j < len2; j++) {
                var el = elements[j];
                var elName = el.nodeName.toLowerCase();

                if (whitelistKeys.indexOf(elName) === -1) {
                    el.parentNode.removeChild(el);

                    continue;
                }

                var attributeList = [].slice.call(el.attributes);
                var whitelistedAttributes = [].concat(
                    whiteList["*"] || [],
                    whiteList[elName] || []
                );

                for (var k = 0, len3 = attributeList.length; k < len3; k++) {
                    var attr = attributeList[k];

                    if (!allowedAttribute(attr, whitelistedAttributes)) {
                        el.removeAttribute(attr.nodeName);
                    }
                }
            }
        }
    }

    // Polyfill for browsers with no classList support
    // Remove in v2
    if (!("classList" in document.createElement("_"))) {
        (function (view) {
            if (!("Element" in view)) return;

            var classListProp = "classList",
                protoProp = "prototype",
                elemCtrProto = view.Element[protoProp],
                objCtr = Object,
                classListGetter = function () {
                    var $elem = $(this);

                    return {
                        add: function (classes) {
                            classes = Array.prototype.slice
                                .call(arguments)
                                .join(" ");
                            return $elem.addClass(classes);
                        },
                        remove: function (classes) {
                            classes = Array.prototype.slice
                                .call(arguments)
                                .join(" ");
                            return $elem.removeClass(classes);
                        },
                        toggle: function (classes, force) {
                            return $elem.toggleClass(classes, force);
                        },
                        contains: function (classes) {
                            return $elem.hasClass(classes);
                        },
                    };
                };

            if (objCtr.defineProperty) {
                var classListPropDesc = {
                    get: classListGetter,
                    enumerable: true,
                    configurable: true,
                };
                try {
                    objCtr.defineProperty(
                        elemCtrProto,
                        classListProp,
                        classListPropDesc
                    );
                } catch (ex) {
                    // IE 8 doesn't support enumerable:true
                    // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
                    // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
                    if (ex.number === undefined || ex.number === -0x7ff5ec54) {
                        classListPropDesc.enumerable = false;
                        objCtr.defineProperty(
                            elemCtrProto,
                            classListProp,
                            classListPropDesc
                        );
                    }
                }
            } else if (objCtr[protoProp].__defineGetter__) {
                elemCtrProto.__defineGetter__(classListProp, classListGetter);
            }
        })(window);
    }

    var testElement = document.createElement("_");

    testElement.classList.add("c1", "c2");

    if (!testElement.classList.contains("c2")) {
        var _add = DOMTokenList.prototype.add,
            _remove = DOMTokenList.prototype.remove;

        DOMTokenList.prototype.add = function () {
            Array.prototype.forEach.call(arguments, _add.bind(this));
        };

        DOMTokenList.prototype.remove = function () {
            Array.prototype.forEach.call(arguments, _remove.bind(this));
        };
    }

    testElement.classList.toggle("c3", false);

    // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
    // support the second argument.
    if (testElement.classList.contains("c3")) {
        var _toggle = DOMTokenList.prototype.toggle;

        DOMTokenList.prototype.toggle = function (token, force) {
            if (1 in arguments && !this.contains(token) === !force) {
                return force;
            } else {
                return _toggle.call(this, token);
            }
        };
    }

    testElement = null;

    // shallow array comparison
    function isEqual(array1, array2) {
        return (
            array1.length === array2.length &&
            array1.every(function (element, index) {
                return element === array2[index];
            })
        );
    }

    // <editor-fold desc="Shims">
    if (!String.prototype.startsWith) {
        (function () {
            "use strict"; // needed to support `apply`/`call` with `undefined`/`null`
            var defineProperty = (function () {
                // IE 8 only supports `Object.defineProperty` on DOM elements
                try {
                    var object = {};
                    var $defineProperty = Object.defineProperty;
                    var result =
                        $defineProperty(object, object, object) &&
                        $defineProperty;
                } catch (error) {}
                return result;
            })();
            var toString = {}.toString;
            var startsWith = function (search) {
                if (this == null) {
                    throw new TypeError();
                }
                var string = String(this);
                if (search && toString.call(search) == "[object RegExp]") {
                    throw new TypeError();
                }
                var stringLength = string.length;
                var searchString = String(search);
                var searchLength = searchString.length;
                var position = arguments.length > 1 ? arguments[1] : undefined;
                // `ToInteger`
                var pos = position ? Number(position) : 0;
                if (pos != pos) {
                    // better `isNaN`
                    pos = 0;
                }
                var start = Math.min(Math.max(pos, 0), stringLength);
                // Avoid the `indexOf` call if no match is possible
                if (searchLength + start > stringLength) {
                    return false;
                }
                var index = -1;
                while (++index < searchLength) {
                    if (
                        string.charCodeAt(start + index) !=
                        searchString.charCodeAt(index)
                    ) {
                        return false;
                    }
                }
                return true;
            };
            if (defineProperty) {
                defineProperty(String.prototype, "startsWith", {
                    value: startsWith,
                    configurable: true,
                    writable: true,
                });
            } else {
                String.prototype.startsWith = startsWith;
            }
        })();
    }

    if (!Object.keys) {
        Object.keys = function (
            o, // object
            k, // key
            r // result array
        ) {
            // initialize object and result
            r = [];
            // iterate over object keys
            for (k in o) {
                // fill result array with non-prototypical keys
                r.hasOwnProperty.call(o, k) && r.push(k);
            }
            // return result
            return r;
        };
    }

    if (
        HTMLSelectElement &&
        !HTMLSelectElement.prototype.hasOwnProperty("selectedOptions")
    ) {
        Object.defineProperty(HTMLSelectElement.prototype, "selectedOptions", {
            get: function () {
                return this.querySelectorAll(":checked");
            },
        });
    }

    function getSelectedOptions(select, ignoreDisabled) {
        var selectedOptions = select.selectedOptions,
            options = [],
            opt;

        if (ignoreDisabled) {
            for (var i = 0, len = selectedOptions.length; i < len; i++) {
                opt = selectedOptions[i];

                if (
                    !(
                        opt.disabled ||
                        (opt.parentNode.tagName === "OPTGROUP" &&
                            opt.parentNode.disabled)
                    )
                ) {
                    options.push(opt);
                }
            }

            return options;
        }

        return selectedOptions;
    }

    // much faster than $.val()
    function getSelectValues(select, selectedOptions) {
        var value = [],
            options = selectedOptions || select.selectedOptions,
            opt;

        for (var i = 0, len = options.length; i < len; i++) {
            opt = options[i];

            if (
                !(
                    opt.disabled ||
                    (opt.parentNode.tagName === "OPTGROUP" &&
                        opt.parentNode.disabled)
                )
            ) {
                value.push(opt.value);
            }
        }

        if (!select.multiple) {
            return !value.length ? null : value[0];
        }

        return value;
    }

    // set data-selected on select element if the value has been programmatically selected
    // prior to initialization of bootstrap-select
    // * consider removing or replacing an alternative method *
    var valHooks = {
        useDefault: false,
        _set: $.valHooks.select.set,
    };

    $.valHooks.select.set = function (elem, value) {
        if (value && !valHooks.useDefault) $(elem).data("selected", true);

        return valHooks._set.apply(this, arguments);
    };

    var changedArguments = null;

    var EventIsSupported = (function () {
        try {
            new Event("change");
            return true;
        } catch (e) {
            return false;
        }
    })();

    $.fn.triggerNative = function (eventName) {
        var el = this[0],
            event;

        if (el.dispatchEvent) {
            // for modern browsers & IE9+
            if (EventIsSupported) {
                // For modern browsers
                event = new Event(eventName, {
                    bubbles: true,
                });
            } else {
                // For IE since it doesn't support Event constructor
                event = document.createEvent("Event");
                event.initEvent(eventName, true, false);
            }

            el.dispatchEvent(event);
        } else if (el.fireEvent) {
            // for IE8
            event = document.createEventObject();
            event.eventType = eventName;
            el.fireEvent("on" + eventName, event);
        } else {
            // fall back to jQuery.trigger
            this.trigger(eventName);
        }
    };
    // </editor-fold>

    function stringSearch(li, searchString, method, normalize) {
        var stringTypes = ["display", "subtext", "tokens"],
            searchSuccess = false;

        for (var i = 0; i < stringTypes.length; i++) {
            var stringType = stringTypes[i],
                string = li[stringType];

            if (string) {
                string = string.toString();

                // Strip HTML tags. This isn't perfect, but it's much faster than any other method
                if (stringType === "display") {
                    string = string.replace(/<[^>]+>/g, "");
                }

                if (normalize) string = normalizeToBase(string);
                string = string.toUpperCase();

                if (method === "contains") {
                    searchSuccess = string.indexOf(searchString) >= 0;
                } else {
                    searchSuccess = string.startsWith(searchString);
                }

                if (searchSuccess) break;
            }
        }

        return searchSuccess;
    }

    function toInteger(value) {
        return parseInt(value, 10) || 0;
    }

    // Borrowed from Lodash (_.deburr)
    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
        // Latin-1 Supplement block.
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\xc3": "A",
        "\xc4": "A",
        "\xc5": "A",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\xe3": "a",
        "\xe4": "a",
        "\xe5": "a",
        "\xc7": "C",
        "\xe7": "c",
        "\xd0": "D",
        "\xf0": "d",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\xcb": "E",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\xeb": "e",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\xcf": "I",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\xef": "i",
        "\xd1": "N",
        "\xf1": "n",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\xd5": "O",
        "\xd6": "O",
        "\xd8": "O",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\xf5": "o",
        "\xf6": "o",
        "\xf8": "o",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\xdc": "U",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\xfc": "u",
        "\xdd": "Y",
        "\xfd": "y",
        "\xff": "y",
        "\xc6": "Ae",
        "\xe6": "ae",
        "\xde": "Th",
        "\xfe": "th",
        "\xdf": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010a": "C",
        "\u010c": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010b": "c",
        "\u010d": "c",
        "\u010e": "D",
        "\u0110": "D",
        "\u010f": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011a": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011b": "e",
        "\u011c": "G",
        "\u011e": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011d": "g",
        "\u011f": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012a": "I",
        "\u012c": "I",
        "\u012e": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012b": "i",
        "\u012d": "i",
        "\u012f": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013b": "L",
        "\u013d": "L",
        "\u013f": "L",
        "\u0141": "L",
        "\u013a": "l",
        "\u013c": "l",
        "\u013e": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014a": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014b": "n",
        "\u014c": "O",
        "\u014e": "O",
        "\u0150": "O",
        "\u014d": "o",
        "\u014f": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015a": "S",
        "\u015c": "S",
        "\u015e": "S",
        "\u0160": "S",
        "\u015b": "s",
        "\u015d": "s",
        "\u015f": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016a": "U",
        "\u016c": "U",
        "\u016e": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016b": "u",
        "\u016d": "u",
        "\u016f": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017b": "Z",
        "\u017d": "Z",
        "\u017a": "z",
        "\u017c": "z",
        "\u017e": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017f": "s",
    };

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboMarksExtendedRange = "\\u1ab0-\\u1aff",
        rsComboMarksSupplementRange = "\\u1dc0-\\u1dff",
        rsComboRange =
            rsComboMarksRange +
            reComboHalfMarksRange +
            rsComboSymbolsRange +
            rsComboMarksExtendedRange +
            rsComboMarksSupplementRange;

    /** Used to compose unicode capture groups. */
    var rsCombo = "[" + rsComboRange + "]";

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, "g");

    function deburrLetter(key) {
        return deburredLetters[key];
    }

    function normalizeToBase(string) {
        string = string.toString();
        return (
            string &&
            string.replace(reLatin, deburrLetter).replace(reComboMark, "")
        );
    }

    // List of HTML entities for escaping.
    var escapeMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;",
    };

    // Functions for escaping and unescaping strings to/from HTML interpolation.
    var createEscaper = function (map) {
        var escaper = function (match) {
            return map[match];
        };
        // Regexes for identifying a key that needs to be escaped.
        var source = "(?:" + Object.keys(map).join("|") + ")";
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, "g");
        return function (string) {
            string = string == null ? "" : "" + string;
            return testRegexp.test(string)
                ? string.replace(replaceRegexp, escaper)
                : string;
        };
    };

    var htmlEscape = createEscaper(escapeMap);

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */

    var keyCodeMap = {
        32: " ",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        59: ";",
        65: "A",
        66: "B",
        67: "C",
        68: "D",
        69: "E",
        70: "F",
        71: "G",
        72: "H",
        73: "I",
        74: "J",
        75: "K",
        76: "L",
        77: "M",
        78: "N",
        79: "O",
        80: "P",
        81: "Q",
        82: "R",
        83: "S",
        84: "T",
        85: "U",
        86: "V",
        87: "W",
        88: "X",
        89: "Y",
        90: "Z",
        96: "0",
        97: "1",
        98: "2",
        99: "3",
        100: "4",
        101: "5",
        102: "6",
        103: "7",
        104: "8",
        105: "9",
    };

    var keyCodes = {
        ESCAPE: 27, // KeyboardEvent.which value for Escape (Esc) key
        ENTER: 13, // KeyboardEvent.which value for Enter key
        SPACE: 32, // KeyboardEvent.which value for space key
        TAB: 9, // KeyboardEvent.which value for tab key
        ARROW_UP: 38, // KeyboardEvent.which value for up arrow key
        ARROW_DOWN: 40, // KeyboardEvent.which value for down arrow key
    };

    var version = {
        success: false,
        major: "3",
    };

    try {
        version.full = ($.fn.dropdown.Constructor.VERSION || "")
            .split(" ")[0]
            .split(".");
        version.major = version.full[0];
        version.success = true;
    } catch (err) {
        // do nothing
    }

    var selectId = 0;

    var EVENT_KEY = ".bs.select";

    var classNames = {
        DISABLED: "disabled",
        DIVIDER: "divider",
        SHOW: "open",
        DROPUP: "dropup",
        MENU: "dropdown-menu",
        MENURIGHT: "dropdown-menu-right",
        MENULEFT: "dropdown-menu-left",
        // to-do: replace with more advanced template/customization options
        BUTTONCLASS: "btn-default",
        POPOVERHEADER: "popover-title",
        ICONBASE: "glyphicon",
        TICKICON: "glyphicon-ok",
    };

    var Selector = {
        MENU: "." + classNames.MENU,
    };

    var elementTemplates = {
        div: document.createElement("div"),
        span: document.createElement("span"),
        i: document.createElement("i"),
        subtext: document.createElement("small"),
        a: document.createElement("a"),
        li: document.createElement("li"),
        whitespace: document.createTextNode("\u00A0"),
        fragment: document.createDocumentFragment(),
    };

    elementTemplates.noResults = elementTemplates.li.cloneNode(false);
    elementTemplates.noResults.className = "no-results";

    elementTemplates.a.setAttribute("role", "option");
    elementTemplates.a.className = "dropdown-item";

    elementTemplates.subtext.className = "text-muted";

    elementTemplates.text = elementTemplates.span.cloneNode(false);
    elementTemplates.text.className = "text";

    elementTemplates.checkMark = elementTemplates.span.cloneNode(false);

    var REGEXP_ARROW = new RegExp(
        keyCodes.ARROW_UP + "|" + keyCodes.ARROW_DOWN
    );
    var REGEXP_TAB_OR_ESCAPE = new RegExp(
        "^" + keyCodes.TAB + "$|" + keyCodes.ESCAPE
    );

    var generateOption = {
        li: function (content, classes, optgroup) {
            var li = elementTemplates.li.cloneNode(false);

            if (content) {
                if (content.nodeType === 1 || content.nodeType === 11) {
                    li.appendChild(content);
                } else {
                    li.innerHTML = content;
                }
            }

            if (typeof classes !== "undefined" && classes !== "")
                li.className = classes;
            if (typeof optgroup !== "undefined" && optgroup !== null)
                li.classList.add("optgroup-" + optgroup);

            return li;
        },

        a: function (text, classes, inline) {
            var a = elementTemplates.a.cloneNode(true);

            if (text) {
                if (text.nodeType === 11) {
                    a.appendChild(text);
                } else {
                    a.insertAdjacentHTML("beforeend", text);
                }
            }

            if (typeof classes !== "undefined" && classes !== "")
                a.classList.add.apply(a.classList, classes.split(/\s+/));
            if (inline) a.setAttribute("style", inline);

            return a;
        },

        text: function (options, useFragment) {
            var textElement = elementTemplates.text.cloneNode(false),
                subtextElement,
                iconElement;

            if (options.content) {
                textElement.innerHTML = options.content;
            } else {
                textElement.textContent = options.text;

                if (options.icon) {
                    var whitespace =
                        elementTemplates.whitespace.cloneNode(false);

                    // need to use <i> for icons in the button to prevent a breaking change
                    // note: switch to span in next major release
                    iconElement = (
                        useFragment === true
                            ? elementTemplates.i
                            : elementTemplates.span
                    ).cloneNode(false);
                    iconElement.className =
                        this.options.iconBase + " " + options.icon;

                    elementTemplates.fragment.appendChild(iconElement);
                    elementTemplates.fragment.appendChild(whitespace);
                }

                if (options.subtext) {
                    subtextElement = elementTemplates.subtext.cloneNode(false);
                    subtextElement.textContent = options.subtext;
                    textElement.appendChild(subtextElement);
                }
            }

            if (useFragment === true) {
                while (textElement.childNodes.length > 0) {
                    elementTemplates.fragment.appendChild(
                        textElement.childNodes[0]
                    );
                }
            } else {
                elementTemplates.fragment.appendChild(textElement);
            }

            return elementTemplates.fragment;
        },

        label: function (options) {
            var textElement = elementTemplates.text.cloneNode(false),
                subtextElement,
                iconElement;

            textElement.innerHTML = options.display;

            if (options.icon) {
                var whitespace = elementTemplates.whitespace.cloneNode(false);

                iconElement = elementTemplates.span.cloneNode(false);
                iconElement.className =
                    this.options.iconBase + " " + options.icon;

                elementTemplates.fragment.appendChild(iconElement);
                elementTemplates.fragment.appendChild(whitespace);
            }

            if (options.subtext) {
                subtextElement = elementTemplates.subtext.cloneNode(false);
                subtextElement.textContent = options.subtext;
                textElement.appendChild(subtextElement);
            }

            elementTemplates.fragment.appendChild(textElement);

            return elementTemplates.fragment;
        },
    };

    function showNoResults(searchMatch, searchValue) {
        if (!searchMatch.length) {
            elementTemplates.noResults.innerHTML =
                this.options.noneResultsText.replace(
                    "{0}",
                    '"' + htmlEscape(searchValue) + '"'
                );
            this.$menuInner[0].firstChild.appendChild(
                elementTemplates.noResults
            );
        }
    }

    var Selectpicker = function (element, options) {
        var that = this;

        // bootstrap-select has been initialized - revert valHooks.select.set back to its original function
        if (!valHooks.useDefault) {
            $.valHooks.select.set = valHooks._set;
            valHooks.useDefault = true;
        }

        this.$element = $(element);
        this.$newElement = null;
        this.$button = null;
        this.$menu = null;
        this.options = options;
        this.selectpicker = {
            main: {},
            search: {},
            current: {}, // current changes if a search is in progress
            view: {},
            isSearching: false,
            keydown: {
                keyHistory: "",
                resetKeyHistory: {
                    start: function () {
                        return setTimeout(function () {
                            that.selectpicker.keydown.keyHistory = "";
                        }, 800);
                    },
                },
            },
        };

        this.sizeInfo = {};

        // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a
        // data-attribute)
        if (this.options.title === null) {
            this.options.title = this.$element.attr("title");
        }

        // Format window padding
        var winPad = this.options.windowPadding;
        if (typeof winPad === "number") {
            this.options.windowPadding = [winPad, winPad, winPad, winPad];
        }

        // Expose public methods
        this.val = Selectpicker.prototype.val;
        this.render = Selectpicker.prototype.render;
        this.refresh = Selectpicker.prototype.refresh;
        this.setStyle = Selectpicker.prototype.setStyle;
        this.selectAll = Selectpicker.prototype.selectAll;
        this.deselectAll = Selectpicker.prototype.deselectAll;
        this.destroy = Selectpicker.prototype.destroy;
        this.remove = Selectpicker.prototype.remove;
        this.show = Selectpicker.prototype.show;
        this.hide = Selectpicker.prototype.hide;

        this.init();
    };

    Selectpicker.VERSION = "1.13.18";

    // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.
    Selectpicker.DEFAULTS = {
        noneSelectedText: "Nothing selected",
        noneResultsText: "No results matched {0}",
        countSelectedText: function (numSelected, numTotal) {
            return numSelected == 1
                ? "{0} item selected"
                : "{0} items selected";
        },
        maxOptionsText: function (numAll, numGroup) {
            return [
                numAll == 1
                    ? "Limit reached ({n} item max)"
                    : "Limit reached ({n} items max)",
                numGroup == 1
                    ? "Group limit reached ({n} item max)"
                    : "Group limit reached ({n} items max)",
            ];
        },
        selectAllText: "Select All",
        deselectAllText: "Deselect All",
        doneButton: false,
        doneButtonText: "Close",
        multipleSeparator: ", ",
        styleBase: "btn",
        style: classNames.BUTTONCLASS,
        size: "auto",
        title: null,
        selectedTextFormat: "values",
        width: false,
        container: false,
        hideDisabled: false,
        showSubtext: false,
        showIcon: true,
        showContent: true,
        dropupAuto: true,
        header: false,
        liveSearch: false,
        liveSearchPlaceholder: null,
        liveSearchNormalize: false,
        liveSearchStyle: "contains",
        actionsBox: false,
        iconBase: classNames.ICONBASE,
        tickIcon: classNames.TICKICON,
        showTick: false,
        template: {
            caret: '<span class="caret"></span>',
        },
        maxOptions: false,
        mobile: false,
        selectOnTab: false,
        dropdownAlignRight: false,
        windowPadding: 0,
        virtualScroll: 600,
        display: false,
        sanitize: true,
        sanitizeFn: null,
        whiteList: DefaultWhitelist,
    };

    Selectpicker.prototype = {
        constructor: Selectpicker,

        init: function () {
            var that = this,
                id = this.$element.attr("id"),
                element = this.$element[0],
                form = element.form;

            selectId++;
            this.selectId = "bs-select-" + selectId;

            element.classList.add("bs-select-hidden");

            this.multiple = this.$element.prop("multiple");
            this.autofocus = this.$element.prop("autofocus");

            if (element.classList.contains("show-tick")) {
                this.options.showTick = true;
            }

            this.$newElement = this.createDropdown();
            this.buildData();
            this.$element.after(this.$newElement).prependTo(this.$newElement);

            // ensure select is associated with form element if it got unlinked after moving it inside newElement
            if (form && element.form === null) {
                if (!form.id) form.id = "form-" + this.selectId;
                element.setAttribute("form", form.id);
            }

            this.$button = this.$newElement.children("button");
            this.$menu = this.$newElement.children(Selector.MENU);
            this.$menuInner = this.$menu.children(".inner");
            this.$searchbox = this.$menu.find("input");

            element.classList.remove("bs-select-hidden");

            if (this.options.dropdownAlignRight === true)
                this.$menu[0].classList.add(classNames.MENURIGHT);

            if (typeof id !== "undefined") {
                this.$button.attr("data-id", id);
            }

            this.checkDisabled();
            this.clickListener();

            if (this.options.liveSearch) {
                this.liveSearchListener();
                this.focusedParent = this.$searchbox[0];
            } else {
                this.focusedParent = this.$menuInner[0];
            }

            this.setStyle();
            this.render();
            this.setWidth();
            if (this.options.container) {
                this.selectPosition();
            } else {
                this.$element.on("hide" + EVENT_KEY, function () {
                    if (that.isVirtual()) {
                        // empty menu on close
                        var menuInner = that.$menuInner[0],
                            emptyMenu = menuInner.firstChild.cloneNode(false);

                        // replace the existing UL with an empty one - this is faster than $.empty() or innerHTML = ''
                        menuInner.replaceChild(emptyMenu, menuInner.firstChild);
                        menuInner.scrollTop = 0;
                    }
                });
            }
            this.$menu.data("this", this);
            this.$newElement.data("this", this);
            if (this.options.mobile) this.mobile();

            this.$newElement.on({
                "hide.bs.dropdown": function (e) {
                    that.$element.trigger("hide" + EVENT_KEY, e);
                },
                "hidden.bs.dropdown": function (e) {
                    that.$element.trigger("hidden" + EVENT_KEY, e);
                },
                "show.bs.dropdown": function (e) {
                    that.$element.trigger("show" + EVENT_KEY, e);
                },
                "shown.bs.dropdown": function (e) {
                    that.$element.trigger("shown" + EVENT_KEY, e);
                },
            });

            if (element.hasAttribute("required")) {
                this.$element.on("invalid" + EVENT_KEY, function () {
                    that.$button[0].classList.add("bs-invalid");

                    that.$element
                        .on("shown" + EVENT_KEY + ".invalid", function () {
                            that.$element
                                .val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened
                                .off("shown" + EVENT_KEY + ".invalid");
                        })
                        .on("rendered" + EVENT_KEY, function () {
                            // if select is no longer invalid, remove the bs-invalid class
                            if (this.validity.valid)
                                that.$button[0].classList.remove("bs-invalid");
                            that.$element.off("rendered" + EVENT_KEY);
                        });

                    that.$button.on("blur" + EVENT_KEY, function () {
                        that.$element.trigger("focus").trigger("blur");
                        that.$button.off("blur" + EVENT_KEY);
                    });
                });
            }

            setTimeout(function () {
                that.buildList();
                that.$element.trigger("loaded" + EVENT_KEY);
            });
        },

        createDropdown: function () {
            // Options
            // If we are multiple or showTick option is set, then add the show-tick class
            var showTick =
                    this.multiple || this.options.showTick ? " show-tick" : "",
                multiselectable = this.multiple
                    ? ' aria-multiselectable="true"'
                    : "",
                inputGroup = "",
                autofocus = this.autofocus ? " autofocus" : "";

            if (
                version.major < 4 &&
                this.$element.parent().hasClass("input-group")
            ) {
                inputGroup = " input-group-btn";
            }

            // Elements
            var drop,
                header = "",
                searchbox = "",
                actionsbox = "",
                donebutton = "";

            if (this.options.header) {
                header =
                    '<div class="' +
                    classNames.POPOVERHEADER +
                    '">' +
                    '<button type="button" class="close" aria-hidden="true">&times;</button>' +
                    this.options.header +
                    "</div>";
            }

            if (this.options.liveSearch) {
                searchbox =
                    '<div class="bs-searchbox">' +
                    '<input type="search" class="form-control" autocomplete="off"' +
                    (this.options.liveSearchPlaceholder === null
                        ? ""
                        : ' placeholder="' +
                          htmlEscape(this.options.liveSearchPlaceholder) +
                          '"') +
                    ' role="combobox" aria-label="Search" aria-controls="' +
                    this.selectId +
                    '" aria-autocomplete="list">' +
                    "</div>";
            }

            if (this.multiple && this.options.actionsBox) {
                actionsbox =
                    '<div class="bs-actionsbox">' +
                    '<div class="btn-group btn-group-sm btn-block">' +
                    '<button type="button" class="actions-btn bs-select-all btn ' +
                    classNames.BUTTONCLASS +
                    '">' +
                    this.options.selectAllText +
                    "</button>" +
                    '<button type="button" class="actions-btn bs-deselect-all btn ' +
                    classNames.BUTTONCLASS +
                    '">' +
                    this.options.deselectAllText +
                    "</button>" +
                    "</div>" +
                    "</div>";
            }

            if (this.multiple && this.options.doneButton) {
                donebutton =
                    '<div class="bs-donebutton">' +
                    '<div class="btn-group btn-block">' +
                    '<button type="button" class="btn btn-sm ' +
                    classNames.BUTTONCLASS +
                    '">' +
                    this.options.doneButtonText +
                    "</button>" +
                    "</div>" +
                    "</div>";
            }

            drop =
                '<div class="dropdown bootstrap-select' +
                showTick +
                inputGroup +
                '">' +
                '<button type="button" tabindex="-1" class="' +
                this.options.styleBase +
                ' dropdown-toggle" ' +
                (this.options.display === "static"
                    ? 'data-display="static"'
                    : "") +
                'data-toggle="dropdown"' +
                autofocus +
                ' role="combobox" aria-owns="' +
                this.selectId +
                '" aria-haspopup="listbox" aria-expanded="false">' +
                '<div class="filter-option">' +
                '<div class="filter-option-inner">' +
                '<div class="filter-option-inner-inner"></div>' +
                "</div> " +
                "</div>" +
                (version.major === "4"
                    ? ""
                    : '<span class="bs-caret">' +
                      this.options.template.caret +
                      "</span>") +
                "</button>" +
                '<div class="' +
                classNames.MENU +
                " " +
                (version.major === "4" ? "" : classNames.SHOW) +
                '">' +
                header +
                searchbox +
                actionsbox +
                '<div class="inner ' +
                classNames.SHOW +
                '" role="listbox" id="' +
                this.selectId +
                '" tabindex="-1" ' +
                multiselectable +
                ">" +
                '<ul class="' +
                classNames.MENU +
                " inner " +
                (version.major === "4" ? classNames.SHOW : "") +
                '" role="presentation">' +
                "</ul>" +
                "</div>" +
                donebutton +
                "</div>" +
                "</div>";

            return $(drop);
        },

        setPositionData: function () {
            this.selectpicker.view.canHighlight = [];
            this.selectpicker.view.size = 0;
            this.selectpicker.view.firstHighlightIndex = false;

            for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                var li = this.selectpicker.current.data[i],
                    canHighlight = true;

                if (li.type === "divider") {
                    canHighlight = false;
                    li.height = this.sizeInfo.dividerHeight;
                } else if (li.type === "optgroup-label") {
                    canHighlight = false;
                    li.height = this.sizeInfo.dropdownHeaderHeight;
                } else {
                    li.height = this.sizeInfo.liHeight;
                }

                if (li.disabled) canHighlight = false;

                this.selectpicker.view.canHighlight.push(canHighlight);

                if (canHighlight) {
                    this.selectpicker.view.size++;
                    li.posinset = this.selectpicker.view.size;
                    if (this.selectpicker.view.firstHighlightIndex === false)
                        this.selectpicker.view.firstHighlightIndex = i;
                }

                li.position =
                    (i === 0
                        ? 0
                        : this.selectpicker.current.data[i - 1].position) +
                    li.height;
            }
        },

        isVirtual: function () {
            return (
                (this.options.virtualScroll !== false &&
                    this.selectpicker.main.elements.length >=
                        this.options.virtualScroll) ||
                this.options.virtualScroll === true
            );
        },

        createView: function (isSearching, setSize, refresh) {
            var that = this,
                scrollTop = 0,
                active = [],
                selected,
                prevActive;

            this.selectpicker.isSearching = isSearching;
            this.selectpicker.current = isSearching
                ? this.selectpicker.search
                : this.selectpicker.main;

            this.setPositionData();

            if (setSize) {
                if (refresh) {
                    scrollTop = this.$menuInner[0].scrollTop;
                } else if (!that.multiple) {
                    var element = that.$element[0],
                        selectedIndex = (
                            element.options[element.selectedIndex] || {}
                        ).liIndex;

                    if (
                        typeof selectedIndex === "number" &&
                        that.options.size !== false
                    ) {
                        var selectedData =
                                that.selectpicker.main.data[selectedIndex],
                            position = selectedData && selectedData.position;

                        if (position) {
                            scrollTop =
                                position -
                                (that.sizeInfo.menuInnerHeight +
                                    that.sizeInfo.liHeight) /
                                    2;
                        }
                    }
                }
            }

            scroll(scrollTop, true);

            this.$menuInner
                .off("scroll.createView")
                .on("scroll.createView", function (e, updateValue) {
                    if (!that.noScroll) scroll(this.scrollTop, updateValue);
                    that.noScroll = false;
                });

            function scroll(scrollTop, init) {
                var size = that.selectpicker.current.elements.length,
                    chunks = [],
                    chunkSize,
                    chunkCount,
                    firstChunk,
                    lastChunk,
                    currentChunk,
                    prevPositions,
                    positionIsDifferent,
                    previousElements,
                    menuIsDifferent = true,
                    isVirtual = that.isVirtual();

                that.selectpicker.view.scrollTop = scrollTop;

                chunkSize = Math.ceil(
                    (that.sizeInfo.menuInnerHeight / that.sizeInfo.liHeight) *
                        1.5
                ); // number of options in a chunk
                chunkCount = Math.round(size / chunkSize) || 1; // number of chunks

                for (var i = 0; i < chunkCount; i++) {
                    var endOfChunk = (i + 1) * chunkSize;

                    if (i === chunkCount - 1) {
                        endOfChunk = size;
                    }

                    chunks[i] = [i * chunkSize + (!i ? 0 : 1), endOfChunk];

                    if (!size) break;

                    if (
                        currentChunk === undefined &&
                        scrollTop - 1 <=
                            that.selectpicker.current.data[endOfChunk - 1]
                                .position -
                                that.sizeInfo.menuInnerHeight
                    ) {
                        currentChunk = i;
                    }
                }

                if (currentChunk === undefined) currentChunk = 0;

                prevPositions = [
                    that.selectpicker.view.position0,
                    that.selectpicker.view.position1,
                ];

                // always display previous, current, and next chunks
                firstChunk = Math.max(0, currentChunk - 1);
                lastChunk = Math.min(chunkCount - 1, currentChunk + 1);

                that.selectpicker.view.position0 =
                    isVirtual === false
                        ? 0
                        : Math.max(0, chunks[firstChunk][0]) || 0;
                that.selectpicker.view.position1 =
                    isVirtual === false
                        ? size
                        : Math.min(size, chunks[lastChunk][1]) || 0;

                positionIsDifferent =
                    prevPositions[0] !== that.selectpicker.view.position0 ||
                    prevPositions[1] !== that.selectpicker.view.position1;

                if (that.activeIndex !== undefined) {
                    prevActive =
                        that.selectpicker.main.elements[that.prevActiveIndex];
                    active = that.selectpicker.main.elements[that.activeIndex];
                    selected =
                        that.selectpicker.main.elements[that.selectedIndex];

                    if (init) {
                        if (that.activeIndex !== that.selectedIndex) {
                            that.defocusItem(active);
                        }
                        that.activeIndex = undefined;
                    }

                    if (
                        that.activeIndex &&
                        that.activeIndex !== that.selectedIndex
                    ) {
                        that.defocusItem(selected);
                    }
                }

                if (
                    that.prevActiveIndex !== undefined &&
                    that.prevActiveIndex !== that.activeIndex &&
                    that.prevActiveIndex !== that.selectedIndex
                ) {
                    that.defocusItem(prevActive);
                }

                if (init || positionIsDifferent) {
                    previousElements = that.selectpicker.view.visibleElements
                        ? that.selectpicker.view.visibleElements.slice()
                        : [];

                    if (isVirtual === false) {
                        that.selectpicker.view.visibleElements =
                            that.selectpicker.current.elements;
                    } else {
                        that.selectpicker.view.visibleElements =
                            that.selectpicker.current.elements.slice(
                                that.selectpicker.view.position0,
                                that.selectpicker.view.position1
                            );
                    }

                    that.setOptionStatus();

                    // if searching, check to make sure the list has actually been updated before updating DOM
                    // this prevents unnecessary repaints
                    if (isSearching || (isVirtual === false && init))
                        menuIsDifferent = !isEqual(
                            previousElements,
                            that.selectpicker.view.visibleElements
                        );

                    // if virtual scroll is disabled and not searching,
                    // menu should never need to be updated more than once
                    if ((init || isVirtual === true) && menuIsDifferent) {
                        var menuInner = that.$menuInner[0],
                            menuFragment = document.createDocumentFragment(),
                            emptyMenu = menuInner.firstChild.cloneNode(false),
                            marginTop,
                            marginBottom,
                            elements = that.selectpicker.view.visibleElements,
                            toSanitize = [];

                        // replace the existing UL with an empty one - this is faster than $.empty()
                        menuInner.replaceChild(emptyMenu, menuInner.firstChild);

                        for (
                            var i = 0, visibleElementsLen = elements.length;
                            i < visibleElementsLen;
                            i++
                        ) {
                            var element = elements[i],
                                elText,
                                elementData;

                            if (that.options.sanitize) {
                                elText = element.lastChild;

                                if (elText) {
                                    elementData =
                                        that.selectpicker.current.data[
                                            i + that.selectpicker.view.position0
                                        ];

                                    if (
                                        elementData &&
                                        elementData.content &&
                                        !elementData.sanitized
                                    ) {
                                        toSanitize.push(elText);
                                        elementData.sanitized = true;
                                    }
                                }
                            }

                            menuFragment.appendChild(element);
                        }

                        if (that.options.sanitize && toSanitize.length) {
                            sanitizeHtml(
                                toSanitize,
                                that.options.whiteList,
                                that.options.sanitizeFn
                            );
                        }

                        if (isVirtual === true) {
                            marginTop =
                                that.selectpicker.view.position0 === 0
                                    ? 0
                                    : that.selectpicker.current.data[
                                          that.selectpicker.view.position0 - 1
                                      ].position;
                            marginBottom =
                                that.selectpicker.view.position1 > size - 1
                                    ? 0
                                    : that.selectpicker.current.data[size - 1]
                                          .position -
                                      that.selectpicker.current.data[
                                          that.selectpicker.view.position1 - 1
                                      ].position;

                            menuInner.firstChild.style.marginTop =
                                marginTop + "px";
                            menuInner.firstChild.style.marginBottom =
                                marginBottom + "px";
                        } else {
                            menuInner.firstChild.style.marginTop = 0;
                            menuInner.firstChild.style.marginBottom = 0;
                        }

                        menuInner.firstChild.appendChild(menuFragment);

                        // if an option is encountered that is wider than the current menu width, update the menu width accordingly
                        // switch to ResizeObserver with increased browser support
                        if (isVirtual === true && that.sizeInfo.hasScrollBar) {
                            var menuInnerInnerWidth =
                                menuInner.firstChild.offsetWidth;

                            if (
                                init &&
                                menuInnerInnerWidth <
                                    that.sizeInfo.menuInnerInnerWidth &&
                                that.sizeInfo.totalMenuWidth >
                                    that.sizeInfo.selectWidth
                            ) {
                                menuInner.firstChild.style.minWidth =
                                    that.sizeInfo.menuInnerInnerWidth + "px";
                            } else if (
                                menuInnerInnerWidth >
                                that.sizeInfo.menuInnerInnerWidth
                            ) {
                                // set to 0 to get actual width of menu
                                that.$menu[0].style.minWidth = 0;

                                var actualMenuWidth =
                                    menuInner.firstChild.offsetWidth;

                                if (
                                    actualMenuWidth >
                                    that.sizeInfo.menuInnerInnerWidth
                                ) {
                                    that.sizeInfo.menuInnerInnerWidth =
                                        actualMenuWidth;
                                    menuInner.firstChild.style.minWidth =
                                        that.sizeInfo.menuInnerInnerWidth +
                                        "px";
                                }

                                // reset to default CSS styling
                                that.$menu[0].style.minWidth = "";
                            }
                        }
                    }
                }

                that.prevActiveIndex = that.activeIndex;

                if (!that.options.liveSearch) {
                    that.$menuInner.trigger("focus");
                } else if (isSearching && init) {
                    var index = 0,
                        newActive;

                    if (!that.selectpicker.view.canHighlight[index]) {
                        index =
                            1 +
                            that.selectpicker.view.canHighlight
                                .slice(1)
                                .indexOf(true);
                    }

                    newActive = that.selectpicker.view.visibleElements[index];

                    that.defocusItem(that.selectpicker.view.currentActive);

                    that.activeIndex = (
                        that.selectpicker.current.data[index] || {}
                    ).index;

                    that.focusItem(newActive);
                }
            }

            $(window)
                .off("resize" + EVENT_KEY + "." + this.selectId + ".createView")
                .on(
                    "resize" + EVENT_KEY + "." + this.selectId + ".createView",
                    function () {
                        var isActive = that.$newElement.hasClass(
                            classNames.SHOW
                        );

                        if (isActive) scroll(that.$menuInner[0].scrollTop);
                    }
                );
        },

        focusItem: function (li, liData, noStyle) {
            if (li) {
                liData =
                    liData || this.selectpicker.main.data[this.activeIndex];
                var a = li.firstChild;

                if (a) {
                    a.setAttribute("aria-setsize", this.selectpicker.view.size);
                    a.setAttribute("aria-posinset", liData.posinset);

                    if (noStyle !== true) {
                        this.focusedParent.setAttribute(
                            "aria-activedescendant",
                            a.id
                        );
                        li.classList.add("active");
                        a.classList.add("active");
                    }
                }
            }
        },

        defocusItem: function (li) {
            if (li) {
                li.classList.remove("active");
                if (li.firstChild) li.firstChild.classList.remove("active");
            }
        },

        setPlaceholder: function () {
            var that = this,
                updateIndex = false;

            if (this.options.title && !this.multiple) {
                if (!this.selectpicker.view.titleOption)
                    this.selectpicker.view.titleOption =
                        document.createElement("option");

                // this option doesn't create a new <li> element, but does add a new option at the start,
                // so startIndex should increase to prevent having to check every option for the bs-title-option class
                updateIndex = true;

                var element = this.$element[0],
                    selectTitleOption = false,
                    titleNotAppended =
                        !this.selectpicker.view.titleOption.parentNode,
                    selectedIndex = element.selectedIndex,
                    selectedOption = element.options[selectedIndex],
                    navigation =
                        window.performance &&
                        window.performance.getEntriesByType("navigation"),
                    // Safari doesn't support getEntriesByType('navigation') - fall back to performance.navigation
                    isNotBackForward =
                        navigation && navigation.length
                            ? navigation[0].type !== "back_forward"
                            : window.performance.navigation.type !== 2;

                if (titleNotAppended) {
                    // Use native JS to prepend option (faster)
                    this.selectpicker.view.titleOption.className =
                        "bs-title-option";
                    this.selectpicker.view.titleOption.value = "";

                    // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.
                    // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,
                    // if so, the select will have the data-selected attribute
                    selectTitleOption =
                        !selectedOption ||
                        (selectedIndex === 0 &&
                            selectedOption.defaultSelected === false &&
                            this.$element.data("selected") === undefined);
                }

                if (
                    titleNotAppended ||
                    this.selectpicker.view.titleOption.index !== 0
                ) {
                    element.insertBefore(
                        this.selectpicker.view.titleOption,
                        element.firstChild
                    );
                }

                // Set selected *after* appending to select,
                // otherwise the option doesn't get selected in IE
                // set using selectedIndex, as setting the selected attr to true here doesn't work in IE11
                if (selectTitleOption && isNotBackForward) {
                    element.selectedIndex = 0;
                } else if (document.readyState !== "complete") {
                    // if navigation type is back_forward, there's a chance the select will have its value set by BFCache
                    // wait for that value to be set, then run render again
                    window.addEventListener("pageshow", function () {
                        if (
                            that.selectpicker.view.displayedValue !==
                            element.value
                        )
                            that.render();
                    });
                }
            }

            return updateIndex;
        },

        buildData: function () {
            var optionSelector = ':not([hidden]):not([data-hidden="true"])',
                mainData = [],
                optID = 0,
                startIndex = this.setPlaceholder() ? 1 : 0; // append the titleOption if necessary and skip the first option in the loop

            if (this.options.hideDisabled) optionSelector += ":not(:disabled)";

            var selectOptions = this.$element[0].querySelectorAll(
                "select > *" + optionSelector
            );

            function addDivider(config) {
                var previousData = mainData[mainData.length - 1];

                // ensure optgroup doesn't create back-to-back dividers
                if (
                    previousData &&
                    previousData.type === "divider" &&
                    (previousData.optID || config.optID)
                ) {
                    return;
                }

                config = config || {};
                config.type = "divider";

                mainData.push(config);
            }

            function addOption(option, config) {
                config = config || {};

                config.divider = option.getAttribute("data-divider") === "true";

                if (config.divider) {
                    addDivider({
                        optID: config.optID,
                    });
                } else {
                    var liIndex = mainData.length,
                        cssText = option.style.cssText,
                        inlineStyle = cssText ? htmlEscape(cssText) : "",
                        optionClass =
                            (option.className || "") +
                            (config.optgroupClass || "");

                    if (config.optID) optionClass = "opt " + optionClass;

                    config.optionClass = optionClass.trim();
                    config.inlineStyle = inlineStyle;
                    config.text = option.textContent;

                    config.content = option.getAttribute("data-content");
                    config.tokens = option.getAttribute("data-tokens");
                    config.subtext = option.getAttribute("data-subtext");
                    config.icon = option.getAttribute("data-icon");

                    option.liIndex = liIndex;

                    config.display = config.content || config.text;
                    config.type = "option";
                    config.index = liIndex;
                    config.option = option;
                    config.selected = !!option.selected;
                    config.disabled = config.disabled || !!option.disabled;

                    mainData.push(config);
                }
            }

            function addOptgroup(index, selectOptions) {
                var optgroup = selectOptions[index],
                    // skip placeholder option
                    previous =
                        index - 1 < startIndex
                            ? false
                            : selectOptions[index - 1],
                    next = selectOptions[index + 1],
                    options = optgroup.querySelectorAll(
                        "option" + optionSelector
                    );

                if (!options.length) return;

                var config = {
                        display: htmlEscape(optgroup.label),
                        subtext: optgroup.getAttribute("data-subtext"),
                        icon: optgroup.getAttribute("data-icon"),
                        type: "optgroup-label",
                        optgroupClass: " " + (optgroup.className || ""),
                    },
                    headerIndex,
                    lastIndex;

                optID++;

                if (previous) {
                    addDivider({ optID: optID });
                }

                config.optID = optID;

                mainData.push(config);

                for (var j = 0, len = options.length; j < len; j++) {
                    var option = options[j];

                    if (j === 0) {
                        headerIndex = mainData.length - 1;
                        lastIndex = headerIndex + len;
                    }

                    addOption(option, {
                        headerIndex: headerIndex,
                        lastIndex: lastIndex,
                        optID: config.optID,
                        optgroupClass: config.optgroupClass,
                        disabled: optgroup.disabled,
                    });
                }

                if (next) {
                    addDivider({ optID: optID });
                }
            }

            for (var len = selectOptions.length, i = startIndex; i < len; i++) {
                var item = selectOptions[i];

                if (item.tagName !== "OPTGROUP") {
                    addOption(item, {});
                } else {
                    addOptgroup(i, selectOptions);
                }
            }

            this.selectpicker.main.data = this.selectpicker.current.data =
                mainData;
        },

        buildList: function () {
            var that = this,
                selectData = this.selectpicker.main.data,
                mainElements = [],
                widestOptionLength = 0;

            if (
                (that.options.showTick || that.multiple) &&
                !elementTemplates.checkMark.parentNode
            ) {
                elementTemplates.checkMark.className =
                    this.options.iconBase +
                    " " +
                    that.options.tickIcon +
                    " check-mark";
                elementTemplates.a.appendChild(elementTemplates.checkMark);
            }

            function buildElement(item) {
                var liElement,
                    combinedLength = 0;

                switch (item.type) {
                    case "divider":
                        liElement = generateOption.li(
                            false,
                            classNames.DIVIDER,
                            item.optID ? item.optID + "div" : undefined
                        );

                        break;

                    case "option":
                        liElement = generateOption.li(
                            generateOption.a(
                                generateOption.text.call(that, item),
                                item.optionClass,
                                item.inlineStyle
                            ),
                            "",
                            item.optID
                        );

                        if (liElement.firstChild) {
                            liElement.firstChild.id =
                                that.selectId + "-" + item.index;
                        }

                        break;

                    case "optgroup-label":
                        liElement = generateOption.li(
                            generateOption.label.call(that, item),
                            "dropdown-header" + item.optgroupClass,
                            item.optID
                        );

                        break;
                }

                item.element = liElement;
                mainElements.push(liElement);

                // count the number of characters in the option - not perfect, but should work in most cases
                if (item.display) combinedLength += item.display.length;
                if (item.subtext) combinedLength += item.subtext.length;
                // if there is an icon, ensure this option's width is checked
                if (item.icon) combinedLength += 1;

                if (combinedLength > widestOptionLength) {
                    widestOptionLength = combinedLength;

                    // guess which option is the widest
                    // use this when calculating menu width
                    // not perfect, but it's fast, and the width will be updating accordingly when scrolling
                    that.selectpicker.view.widestOption =
                        mainElements[mainElements.length - 1];
                }
            }

            for (var len = selectData.length, i = 0; i < len; i++) {
                var item = selectData[i];

                buildElement(item);
            }

            this.selectpicker.main.elements =
                this.selectpicker.current.elements = mainElements;
        },

        findLis: function () {
            return this.$menuInner.find(".inner > li");
        },

        render: function () {
            var that = this,
                element = this.$element[0],
                // ensure titleOption is appended and selected (if necessary) before getting selectedOptions
                placeholderSelected =
                    this.setPlaceholder() && element.selectedIndex === 0,
                selectedOptions = getSelectedOptions(
                    element,
                    this.options.hideDisabled
                ),
                selectedCount = selectedOptions.length,
                button = this.$button[0],
                buttonInner = button.querySelector(
                    ".filter-option-inner-inner"
                ),
                multipleSeparator = document.createTextNode(
                    this.options.multipleSeparator
                ),
                titleFragment = elementTemplates.fragment.cloneNode(false),
                showCount,
                countMax,
                hasContent = false;

            button.classList.toggle(
                "bs-placeholder",
                that.multiple
                    ? !selectedCount
                    : !getSelectValues(element, selectedOptions)
            );

            if (!that.multiple && selectedOptions.length === 1) {
                that.selectpicker.view.displayedValue = getSelectValues(
                    element,
                    selectedOptions
                );
            }

            if (this.options.selectedTextFormat === "static") {
                titleFragment = generateOption.text.call(
                    this,
                    { text: this.options.title },
                    true
                );
            } else {
                showCount =
                    this.multiple &&
                    this.options.selectedTextFormat.indexOf("count") !== -1 &&
                    selectedCount > 1;

                // determine if the number of selected options will be shown (showCount === true)
                if (showCount) {
                    countMax = this.options.selectedTextFormat.split(">");
                    showCount =
                        (countMax.length > 1 && selectedCount > countMax[1]) ||
                        (countMax.length === 1 && selectedCount >= 2);
                }

                // only loop through all selected options if the count won't be shown
                if (showCount === false) {
                    if (!placeholderSelected) {
                        for (
                            var selectedIndex = 0;
                            selectedIndex < selectedCount;
                            selectedIndex++
                        ) {
                            if (selectedIndex < 50) {
                                var option = selectedOptions[selectedIndex],
                                    thisData =
                                        this.selectpicker.main.data[
                                            option.liIndex
                                        ],
                                    titleOptions = {};

                                if (this.multiple && selectedIndex > 0) {
                                    titleFragment.appendChild(
                                        multipleSeparator.cloneNode(false)
                                    );
                                }

                                if (option.title) {
                                    titleOptions.text = option.title;
                                } else if (thisData) {
                                    if (
                                        thisData.content &&
                                        that.options.showContent
                                    ) {
                                        titleOptions.content =
                                            thisData.content.toString();
                                        hasContent = true;
                                    } else {
                                        if (that.options.showIcon) {
                                            titleOptions.icon = thisData.icon;
                                        }
                                        if (
                                            that.options.showSubtext &&
                                            !that.multiple &&
                                            thisData.subtext
                                        )
                                            titleOptions.subtext =
                                                " " + thisData.subtext;
                                        titleOptions.text =
                                            option.textContent.trim();
                                    }
                                }

                                titleFragment.appendChild(
                                    generateOption.text.call(
                                        this,
                                        titleOptions,
                                        true
                                    )
                                );
                            } else {
                                break;
                            }
                        }

                        // add ellipsis
                        if (selectedCount > 49) {
                            titleFragment.appendChild(
                                document.createTextNode("...")
                            );
                        }
                    }
                } else {
                    var optionSelector =
                        ':not([hidden]):not([data-hidden="true"]):not([data-divider="true"])';
                    if (this.options.hideDisabled)
                        optionSelector += ":not(:disabled)";

                    // If this is a multiselect, and selectedTextFormat is count, then show 1 of 2 selected, etc.
                    var totalCount = this.$element[0].querySelectorAll(
                            "select > option" +
                                optionSelector +
                                ", optgroup" +
                                optionSelector +
                                " option" +
                                optionSelector
                        ).length,
                        tr8nText =
                            typeof this.options.countSelectedText === "function"
                                ? this.options.countSelectedText(
                                      selectedCount,
                                      totalCount
                                  )
                                : this.options.countSelectedText;

                    titleFragment = generateOption.text.call(
                        this,
                        {
                            text: tr8nText
                                .replace("{0}", selectedCount.toString())
                                .replace("{1}", totalCount.toString()),
                        },
                        true
                    );
                }
            }

            if (this.options.title == undefined) {
                // use .attr to ensure undefined is returned if title attribute is not set
                this.options.title = this.$element.attr("title");
            }

            // If the select doesn't have a title, then use the default, or if nothing is set at all, use noneSelectedText
            if (!titleFragment.childNodes.length) {
                titleFragment = generateOption.text.call(
                    this,
                    {
                        text:
                            typeof this.options.title !== "undefined"
                                ? this.options.title
                                : this.options.noneSelectedText,
                    },
                    true
                );
            }

            // strip all HTML tags and trim the result, then unescape any escaped tags
            button.title = titleFragment.textContent
                .replace(/<[^>]*>?/g, "")
                .trim();

            if (this.options.sanitize && hasContent) {
                sanitizeHtml(
                    [titleFragment],
                    that.options.whiteList,
                    that.options.sanitizeFn
                );
            }

            buttonInner.innerHTML = "";
            buttonInner.appendChild(titleFragment);

            if (
                version.major < 4 &&
                this.$newElement[0].classList.contains("bs3-has-addon")
            ) {
                var filterExpand = button.querySelector(".filter-expand"),
                    clone = buttonInner.cloneNode(true);

                clone.className = "filter-expand";

                if (filterExpand) {
                    button.replaceChild(clone, filterExpand);
                } else {
                    button.appendChild(clone);
                }
            }

            this.$element.trigger("rendered" + EVENT_KEY);
        },

        /**
         * @param [style]
         * @param [status]
         */
        setStyle: function (newStyle, status) {
            var button = this.$button[0],
                newElement = this.$newElement[0],
                style = this.options.style.trim(),
                buttonClass;

            if (this.$element.attr("class")) {
                this.$newElement.addClass(
                    this.$element
                        .attr("class")
                        .replace(
                            /selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi,
                            ""
                        )
                );
            }

            if (version.major < 4) {
                newElement.classList.add("bs3");

                if (
                    newElement.parentNode.classList &&
                    newElement.parentNode.classList.contains("input-group") &&
                    (newElement.previousElementSibling ||
                        newElement.nextElementSibling) &&
                    (
                        newElement.previousElementSibling ||
                        newElement.nextElementSibling
                    ).classList.contains("input-group-addon")
                ) {
                    newElement.classList.add("bs3-has-addon");
                }
            }

            if (newStyle) {
                buttonClass = newStyle.trim();
            } else {
                buttonClass = style;
            }

            if (status == "add") {
                if (buttonClass)
                    button.classList.add.apply(
                        button.classList,
                        buttonClass.split(" ")
                    );
            } else if (status == "remove") {
                if (buttonClass)
                    button.classList.remove.apply(
                        button.classList,
                        buttonClass.split(" ")
                    );
            } else {
                if (style)
                    button.classList.remove.apply(
                        button.classList,
                        style.split(" ")
                    );
                if (buttonClass)
                    button.classList.add.apply(
                        button.classList,
                        buttonClass.split(" ")
                    );
            }
        },

        liHeight: function (refresh) {
            if (
                !refresh &&
                (this.options.size === false ||
                    Object.keys(this.sizeInfo).length)
            )
                return;

            var newElement = elementTemplates.div.cloneNode(false),
                menu = elementTemplates.div.cloneNode(false),
                menuInner = elementTemplates.div.cloneNode(false),
                menuInnerInner = document.createElement("ul"),
                divider = elementTemplates.li.cloneNode(false),
                dropdownHeader = elementTemplates.li.cloneNode(false),
                li,
                a = elementTemplates.a.cloneNode(false),
                text = elementTemplates.span.cloneNode(false),
                header =
                    this.options.header &&
                    this.$menu.find("." + classNames.POPOVERHEADER).length > 0
                        ? this.$menu
                              .find("." + classNames.POPOVERHEADER)[0]
                              .cloneNode(true)
                        : null,
                search = this.options.liveSearch
                    ? elementTemplates.div.cloneNode(false)
                    : null,
                actions =
                    this.options.actionsBox &&
                    this.multiple &&
                    this.$menu.find(".bs-actionsbox").length > 0
                        ? this.$menu.find(".bs-actionsbox")[0].cloneNode(true)
                        : null,
                doneButton =
                    this.options.doneButton &&
                    this.multiple &&
                    this.$menu.find(".bs-donebutton").length > 0
                        ? this.$menu.find(".bs-donebutton")[0].cloneNode(true)
                        : null,
                firstOption = this.$element.find("option")[0];

            this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth;

            text.className = "text";
            a.className =
                "dropdown-item " + (firstOption ? firstOption.className : "");
            newElement.className =
                this.$menu[0].parentNode.className + " " + classNames.SHOW;
            newElement.style.width = 0; // ensure button width doesn't affect natural width of menu when calculating
            if (this.options.width === "auto") menu.style.minWidth = 0;
            menu.className = classNames.MENU + " " + classNames.SHOW;
            menuInner.className = "inner " + classNames.SHOW;
            menuInnerInner.className =
                classNames.MENU +
                " inner " +
                (version.major === "4" ? classNames.SHOW : "");
            divider.className = classNames.DIVIDER;
            dropdownHeader.className = "dropdown-header";

            text.appendChild(document.createTextNode("\u200b"));

            if (this.selectpicker.current.data.length) {
                for (
                    var i = 0;
                    i < this.selectpicker.current.data.length;
                    i++
                ) {
                    var data = this.selectpicker.current.data[i];
                    if (data.type === "option") {
                        li = data.element;
                        break;
                    }
                }
            } else {
                li = elementTemplates.li.cloneNode(false);
                a.appendChild(text);
                li.appendChild(a);
            }

            dropdownHeader.appendChild(text.cloneNode(true));

            if (this.selectpicker.view.widestOption) {
                menuInnerInner.appendChild(
                    this.selectpicker.view.widestOption.cloneNode(true)
                );
            }

            menuInnerInner.appendChild(li);
            menuInnerInner.appendChild(divider);
            menuInnerInner.appendChild(dropdownHeader);
            if (header) menu.appendChild(header);
            if (search) {
                var input = document.createElement("input");
                search.className = "bs-searchbox";
                input.className = "form-control";
                search.appendChild(input);
                menu.appendChild(search);
            }
            if (actions) menu.appendChild(actions);
            menuInner.appendChild(menuInnerInner);
            menu.appendChild(menuInner);
            if (doneButton) menu.appendChild(doneButton);
            newElement.appendChild(menu);

            document.body.appendChild(newElement);

            var liHeight = li.offsetHeight,
                dropdownHeaderHeight = dropdownHeader
                    ? dropdownHeader.offsetHeight
                    : 0,
                headerHeight = header ? header.offsetHeight : 0,
                searchHeight = search ? search.offsetHeight : 0,
                actionsHeight = actions ? actions.offsetHeight : 0,
                doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,
                dividerHeight = $(divider).outerHeight(true),
                // fall back to jQuery if getComputedStyle is not supported
                menuStyle = window.getComputedStyle
                    ? window.getComputedStyle(menu)
                    : false,
                menuWidth = menu.offsetWidth,
                $menu = menuStyle ? null : $(menu),
                menuPadding = {
                    vert:
                        toInteger(
                            menuStyle
                                ? menuStyle.paddingTop
                                : $menu.css("paddingTop")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.paddingBottom
                                : $menu.css("paddingBottom")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.borderTopWidth
                                : $menu.css("borderTopWidth")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.borderBottomWidth
                                : $menu.css("borderBottomWidth")
                        ),
                    horiz:
                        toInteger(
                            menuStyle
                                ? menuStyle.paddingLeft
                                : $menu.css("paddingLeft")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.paddingRight
                                : $menu.css("paddingRight")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.borderLeftWidth
                                : $menu.css("borderLeftWidth")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.borderRightWidth
                                : $menu.css("borderRightWidth")
                        ),
                },
                menuExtras = {
                    vert:
                        menuPadding.vert +
                        toInteger(
                            menuStyle
                                ? menuStyle.marginTop
                                : $menu.css("marginTop")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.marginBottom
                                : $menu.css("marginBottom")
                        ) +
                        2,
                    horiz:
                        menuPadding.horiz +
                        toInteger(
                            menuStyle
                                ? menuStyle.marginLeft
                                : $menu.css("marginLeft")
                        ) +
                        toInteger(
                            menuStyle
                                ? menuStyle.marginRight
                                : $menu.css("marginRight")
                        ) +
                        2,
                },
                scrollBarWidth;

            menuInner.style.overflowY = "scroll";

            scrollBarWidth = menu.offsetWidth - menuWidth;

            document.body.removeChild(newElement);

            this.sizeInfo.liHeight = liHeight;
            this.sizeInfo.dropdownHeaderHeight = dropdownHeaderHeight;
            this.sizeInfo.headerHeight = headerHeight;
            this.sizeInfo.searchHeight = searchHeight;
            this.sizeInfo.actionsHeight = actionsHeight;
            this.sizeInfo.doneButtonHeight = doneButtonHeight;
            this.sizeInfo.dividerHeight = dividerHeight;
            this.sizeInfo.menuPadding = menuPadding;
            this.sizeInfo.menuExtras = menuExtras;
            this.sizeInfo.menuWidth = menuWidth;
            this.sizeInfo.menuInnerInnerWidth = menuWidth - menuPadding.horiz;
            this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth;
            this.sizeInfo.scrollBarWidth = scrollBarWidth;
            this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight;

            this.setPositionData();
        },

        getSelectPosition: function () {
            var that = this,
                $window = $(window),
                pos = that.$newElement.offset(),
                $container = $(that.options.container),
                containerPos;

            if (
                that.options.container &&
                $container.length &&
                !$container.is("body")
            ) {
                containerPos = $container.offset();
                containerPos.top += parseInt($container.css("borderTopWidth"));
                containerPos.left += parseInt(
                    $container.css("borderLeftWidth")
                );
            } else {
                containerPos = { top: 0, left: 0 };
            }

            var winPad = that.options.windowPadding;

            this.sizeInfo.selectOffsetTop =
                pos.top - containerPos.top - $window.scrollTop();
            this.sizeInfo.selectOffsetBot =
                $window.height() -
                this.sizeInfo.selectOffsetTop -
                this.sizeInfo.selectHeight -
                containerPos.top -
                winPad[2];
            this.sizeInfo.selectOffsetLeft =
                pos.left - containerPos.left - $window.scrollLeft();
            this.sizeInfo.selectOffsetRight =
                $window.width() -
                this.sizeInfo.selectOffsetLeft -
                this.sizeInfo.selectWidth -
                containerPos.left -
                winPad[1];
            this.sizeInfo.selectOffsetTop -= winPad[0];
            this.sizeInfo.selectOffsetLeft -= winPad[3];
        },

        setMenuSize: function (isAuto) {
            this.getSelectPosition();

            var selectWidth = this.sizeInfo.selectWidth,
                liHeight = this.sizeInfo.liHeight,
                headerHeight = this.sizeInfo.headerHeight,
                searchHeight = this.sizeInfo.searchHeight,
                actionsHeight = this.sizeInfo.actionsHeight,
                doneButtonHeight = this.sizeInfo.doneButtonHeight,
                divHeight = this.sizeInfo.dividerHeight,
                menuPadding = this.sizeInfo.menuPadding,
                menuInnerHeight,
                menuHeight,
                divLength = 0,
                minHeight,
                _minHeight,
                maxHeight,
                menuInnerMinHeight,
                estimate,
                isDropup;

            if (this.options.dropupAuto) {
                // Get the estimated height of the menu without scrollbars.
                // This is useful for smaller menus, where there might be plenty of room
                // below the button without setting dropup, but we can't know
                // the exact height of the menu until createView is called later
                estimate =
                    liHeight * this.selectpicker.current.elements.length +
                    menuPadding.vert;

                isDropup =
                    this.sizeInfo.selectOffsetTop -
                        this.sizeInfo.selectOffsetBot >
                        this.sizeInfo.menuExtras.vert &&
                    estimate + this.sizeInfo.menuExtras.vert + 50 >
                        this.sizeInfo.selectOffsetBot;

                // ensure dropup doesn't change while searching (so menu doesn't bounce back and forth)
                if (this.selectpicker.isSearching === true) {
                    isDropup = this.selectpicker.dropup;
                }

                this.$newElement.toggleClass(classNames.DROPUP, isDropup);
                this.selectpicker.dropup = isDropup;
            }

            if (this.options.size === "auto") {
                _minHeight =
                    this.selectpicker.current.elements.length > 3
                        ? this.sizeInfo.liHeight * 3 +
                          this.sizeInfo.menuExtras.vert -
                          2
                        : 0;
                menuHeight =
                    this.sizeInfo.selectOffsetBot -
                    this.sizeInfo.menuExtras.vert;
                minHeight =
                    _minHeight +
                    headerHeight +
                    searchHeight +
                    actionsHeight +
                    doneButtonHeight;
                menuInnerMinHeight = Math.max(_minHeight - menuPadding.vert, 0);

                if (this.$newElement.hasClass(classNames.DROPUP)) {
                    menuHeight =
                        this.sizeInfo.selectOffsetTop -
                        this.sizeInfo.menuExtras.vert;
                }

                maxHeight = menuHeight;
                menuInnerHeight =
                    menuHeight -
                    headerHeight -
                    searchHeight -
                    actionsHeight -
                    doneButtonHeight -
                    menuPadding.vert;
            } else if (
                this.options.size &&
                this.options.size != "auto" &&
                this.selectpicker.current.elements.length > this.options.size
            ) {
                for (var i = 0; i < this.options.size; i++) {
                    if (this.selectpicker.current.data[i].type === "divider")
                        divLength++;
                }

                menuHeight =
                    liHeight * this.options.size +
                    divLength * divHeight +
                    menuPadding.vert;
                menuInnerHeight = menuHeight - menuPadding.vert;
                maxHeight =
                    menuHeight +
                    headerHeight +
                    searchHeight +
                    actionsHeight +
                    doneButtonHeight;
                minHeight = menuInnerMinHeight = "";
            }

            this.$menu.css({
                "max-height": maxHeight + "px",
                overflow: "hidden",
                "min-height": minHeight + "px",
            });

            this.$menuInner.css({
                "max-height": menuInnerHeight + "px",
                "overflow-y": "auto",
                "min-height": menuInnerMinHeight + "px",
            });

            // ensure menuInnerHeight is always a positive number to prevent issues calculating chunkSize in createView
            this.sizeInfo.menuInnerHeight = Math.max(menuInnerHeight, 1);

            if (
                this.selectpicker.current.data.length &&
                this.selectpicker.current.data[
                    this.selectpicker.current.data.length - 1
                ].position > this.sizeInfo.menuInnerHeight
            ) {
                this.sizeInfo.hasScrollBar = true;
                this.sizeInfo.totalMenuWidth =
                    this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth;
            }

            if (this.options.dropdownAlignRight === "auto") {
                this.$menu.toggleClass(
                    classNames.MENURIGHT,
                    this.sizeInfo.selectOffsetLeft >
                        this.sizeInfo.selectOffsetRight &&
                        this.sizeInfo.selectOffsetRight <
                            this.sizeInfo.totalMenuWidth - selectWidth
                );
            }

            if (this.dropdown && this.dropdown._popper)
                this.dropdown._popper.update();
        },

        setSize: function (refresh) {
            this.liHeight(refresh);

            if (this.options.header) this.$menu.css("padding-top", 0);

            if (this.options.size !== false) {
                var that = this,
                    $window = $(window);

                this.setMenuSize();

                if (this.options.liveSearch) {
                    this.$searchbox
                        .off("input.setMenuSize propertychange.setMenuSize")
                        .on(
                            "input.setMenuSize propertychange.setMenuSize",
                            function () {
                                return that.setMenuSize();
                            }
                        );
                }

                if (this.options.size === "auto") {
                    $window
                        .off(
                            "resize" +
                                EVENT_KEY +
                                "." +
                                this.selectId +
                                ".setMenuSize" +
                                " scroll" +
                                EVENT_KEY +
                                "." +
                                this.selectId +
                                ".setMenuSize"
                        )
                        .on(
                            "resize" +
                                EVENT_KEY +
                                "." +
                                this.selectId +
                                ".setMenuSize" +
                                " scroll" +
                                EVENT_KEY +
                                "." +
                                this.selectId +
                                ".setMenuSize",
                            function () {
                                return that.setMenuSize();
                            }
                        );
                } else if (
                    this.options.size &&
                    this.options.size != "auto" &&
                    this.selectpicker.current.elements.length >
                        this.options.size
                ) {
                    $window.off(
                        "resize" +
                            EVENT_KEY +
                            "." +
                            this.selectId +
                            ".setMenuSize" +
                            " scroll" +
                            EVENT_KEY +
                            "." +
                            this.selectId +
                            ".setMenuSize"
                    );
                }
            }

            this.createView(false, true, refresh);
        },

        setWidth: function () {
            var that = this;

            if (this.options.width === "auto") {
                requestAnimationFrame(function () {
                    that.$menu.css("min-width", "0");

                    that.$element.on("loaded" + EVENT_KEY, function () {
                        that.liHeight();
                        that.setMenuSize();

                        // Get correct width if element is hidden
                        var $selectClone = that.$newElement
                                .clone()
                                .appendTo("body"),
                            btnWidth = $selectClone
                                .css("width", "auto")
                                .children("button")
                                .outerWidth();

                        $selectClone.remove();

                        // Set width to whatever's larger, button title or longest option
                        that.sizeInfo.selectWidth = Math.max(
                            that.sizeInfo.totalMenuWidth,
                            btnWidth
                        );
                        that.$newElement.css(
                            "width",
                            that.sizeInfo.selectWidth + "px"
                        );
                    });
                });
            } else if (this.options.width === "fit") {
                // Remove inline min-width so width can be changed from 'auto'
                this.$menu.css("min-width", "");
                this.$newElement.css("width", "").addClass("fit-width");
            } else if (this.options.width) {
                // Remove inline min-width so width can be changed from 'auto'
                this.$menu.css("min-width", "");
                this.$newElement.css("width", this.options.width);
            } else {
                // Remove inline min-width/width so width can be changed
                this.$menu.css("min-width", "");
                this.$newElement.css("width", "");
            }
            // Remove fit-width class if width is changed programmatically
            if (
                this.$newElement.hasClass("fit-width") &&
                this.options.width !== "fit"
            ) {
                this.$newElement[0].classList.remove("fit-width");
            }
        },

        selectPosition: function () {
            this.$bsContainer = $('<div class="bs-container" />');

            var that = this,
                $container = $(this.options.container),
                pos,
                containerPos,
                actualHeight,
                getPlacement = function ($element) {
                    var containerPosition = {},
                        // fall back to dropdown's default display setting if display is not manually set
                        display =
                            that.options.display ||
                            // Bootstrap 3 doesn't have $.fn.dropdown.Constructor.Default
                            ($.fn.dropdown.Constructor.Default
                                ? $.fn.dropdown.Constructor.Default.display
                                : false);

                    that.$bsContainer
                        .addClass(
                            $element
                                .attr("class")
                                .replace(/form-control|fit-width/gi, "")
                        )
                        .toggleClass(
                            classNames.DROPUP,
                            $element.hasClass(classNames.DROPUP)
                        );
                    pos = $element.offset();

                    if (!$container.is("body")) {
                        containerPos = $container.offset();
                        containerPos.top +=
                            parseInt($container.css("borderTopWidth")) -
                            $container.scrollTop();
                        containerPos.left +=
                            parseInt($container.css("borderLeftWidth")) -
                            $container.scrollLeft();
                    } else {
                        containerPos = { top: 0, left: 0 };
                    }

                    actualHeight = $element.hasClass(classNames.DROPUP)
                        ? 0
                        : $element[0].offsetHeight;

                    // Bootstrap 4+ uses Popper for menu positioning
                    if (version.major < 4 || display === "static") {
                        containerPosition.top =
                            pos.top - containerPos.top + actualHeight;
                        containerPosition.left = pos.left - containerPos.left;
                    }

                    containerPosition.width = $element[0].offsetWidth;

                    that.$bsContainer.css(containerPosition);
                };

            this.$button.on("click.bs.dropdown.data-api", function () {
                if (that.isDisabled()) {
                    return;
                }

                getPlacement(that.$newElement);

                that.$bsContainer
                    .appendTo(that.options.container)
                    .toggleClass(
                        classNames.SHOW,
                        !that.$button.hasClass(classNames.SHOW)
                    )
                    .append(that.$menu);
            });

            $(window)
                .off(
                    "resize" +
                        EVENT_KEY +
                        "." +
                        this.selectId +
                        " scroll" +
                        EVENT_KEY +
                        "." +
                        this.selectId
                )
                .on(
                    "resize" +
                        EVENT_KEY +
                        "." +
                        this.selectId +
                        " scroll" +
                        EVENT_KEY +
                        "." +
                        this.selectId,
                    function () {
                        var isActive = that.$newElement.hasClass(
                            classNames.SHOW
                        );

                        if (isActive) getPlacement(that.$newElement);
                    }
                );

            this.$element.on("hide" + EVENT_KEY, function () {
                that.$menu.data("height", that.$menu.height());
                that.$bsContainer.detach();
            });
        },

        setOptionStatus: function (selectedOnly) {
            var that = this;

            that.noScroll = false;

            if (
                that.selectpicker.view.visibleElements &&
                that.selectpicker.view.visibleElements.length
            ) {
                for (
                    var i = 0;
                    i < that.selectpicker.view.visibleElements.length;
                    i++
                ) {
                    var liData =
                            that.selectpicker.current.data[
                                i + that.selectpicker.view.position0
                            ],
                        option = liData.option;

                    if (option) {
                        if (selectedOnly !== true) {
                            that.setDisabled(liData.index, liData.disabled);
                        }

                        that.setSelected(liData.index, option.selected);
                    }
                }
            }
        },

        /**
         * @param {number} index - the index of the option that is being changed
         * @param {boolean} selected - true if the option is being selected, false if being deselected
         */
        setSelected: function (index, selected) {
            var li = this.selectpicker.main.elements[index],
                liData = this.selectpicker.main.data[index],
                activeIndexIsSet = this.activeIndex !== undefined,
                thisIsActive = this.activeIndex === index,
                prevActive,
                a,
                // if current option is already active
                // OR
                // if the current option is being selected, it's NOT multiple, and
                // activeIndex is undefined:
                //  - when the menu is first being opened, OR
                //  - after a search has been performed, OR
                //  - when retainActive is false when selecting a new option (i.e. index of the newly selected option is not the same as the current activeIndex)
                keepActive =
                    thisIsActive ||
                    (selected && !this.multiple && !activeIndexIsSet);

            liData.selected = selected;

            a = li.firstChild;

            if (selected) {
                this.selectedIndex = index;
            }

            li.classList.toggle("selected", selected);

            if (keepActive) {
                this.focusItem(li, liData);
                this.selectpicker.view.currentActive = li;
                this.activeIndex = index;
            } else {
                this.defocusItem(li);
            }

            if (a) {
                a.classList.toggle("selected", selected);

                if (selected) {
                    a.setAttribute("aria-selected", true);
                } else {
                    if (this.multiple) {
                        a.setAttribute("aria-selected", false);
                    } else {
                        a.removeAttribute("aria-selected");
                    }
                }
            }

            if (
                !keepActive &&
                !activeIndexIsSet &&
                selected &&
                this.prevActiveIndex !== undefined
            ) {
                prevActive =
                    this.selectpicker.main.elements[this.prevActiveIndex];

                this.defocusItem(prevActive);
            }
        },

        /**
         * @param {number} index - the index of the option that is being disabled
         * @param {boolean} disabled - true if the option is being disabled, false if being enabled
         */
        setDisabled: function (index, disabled) {
            var li = this.selectpicker.main.elements[index],
                a;

            this.selectpicker.main.data[index].disabled = disabled;

            a = li.firstChild;

            li.classList.toggle(classNames.DISABLED, disabled);

            if (a) {
                if (version.major === "4")
                    a.classList.toggle(classNames.DISABLED, disabled);

                if (disabled) {
                    a.setAttribute("aria-disabled", disabled);
                    a.setAttribute("tabindex", -1);
                } else {
                    a.removeAttribute("aria-disabled");
                    a.setAttribute("tabindex", 0);
                }
            }
        },

        isDisabled: function () {
            return this.$element[0].disabled;
        },

        checkDisabled: function () {
            if (this.isDisabled()) {
                this.$newElement[0].classList.add(classNames.DISABLED);
                this.$button
                    .addClass(classNames.DISABLED)
                    .attr("aria-disabled", true);
            } else {
                if (this.$button[0].classList.contains(classNames.DISABLED)) {
                    this.$newElement[0].classList.remove(classNames.DISABLED);
                    this.$button
                        .removeClass(classNames.DISABLED)
                        .attr("aria-disabled", false);
                }
            }
        },

        clickListener: function () {
            var that = this,
                $document = $(document);

            $document.data("spaceSelect", false);

            this.$button.on("keyup", function (e) {
                if (
                    /(32)/.test(e.keyCode.toString(10)) &&
                    $document.data("spaceSelect")
                ) {
                    e.preventDefault();
                    $document.data("spaceSelect", false);
                }
            });

            this.$newElement.on("show.bs.dropdown", function () {
                if (version.major > 3 && !that.dropdown) {
                    that.dropdown = that.$button.data("bs.dropdown");
                    that.dropdown._menu = that.$menu[0];
                }
            });

            this.$button.on("click.bs.dropdown.data-api", function () {
                if (!that.$newElement.hasClass(classNames.SHOW)) {
                    that.setSize();
                }
            });

            function setFocus() {
                if (that.options.liveSearch) {
                    that.$searchbox.trigger("focus");
                } else {
                    that.$menuInner.trigger("focus");
                }
            }

            function checkPopperExists() {
                if (
                    that.dropdown &&
                    that.dropdown._popper &&
                    that.dropdown._popper.state.isCreated
                ) {
                    setFocus();
                } else {
                    requestAnimationFrame(checkPopperExists);
                }
            }

            this.$element.on("shown" + EVENT_KEY, function () {
                if (
                    that.$menuInner[0].scrollTop !==
                    that.selectpicker.view.scrollTop
                ) {
                    that.$menuInner[0].scrollTop =
                        that.selectpicker.view.scrollTop;
                }

                if (version.major > 3) {
                    requestAnimationFrame(checkPopperExists);
                } else {
                    setFocus();
                }
            });

            // ensure posinset and setsize are correct before selecting an option via a click
            this.$menuInner.on("mouseenter", "li a", function (e) {
                var hoverLi = this.parentElement,
                    position0 = that.isVirtual()
                        ? that.selectpicker.view.position0
                        : 0,
                    index = Array.prototype.indexOf.call(
                        hoverLi.parentElement.children,
                        hoverLi
                    ),
                    hoverData =
                        that.selectpicker.current.data[index + position0];

                that.focusItem(hoverLi, hoverData, true);
            });

            this.$menuInner.on("click", "li a", function (e, retainActive) {
                var $this = $(this),
                    element = that.$element[0],
                    position0 = that.isVirtual()
                        ? that.selectpicker.view.position0
                        : 0,
                    clickedData =
                        that.selectpicker.current.data[
                            $this.parent().index() + position0
                        ],
                    clickedIndex = clickedData.index,
                    prevValue = getSelectValues(element),
                    prevIndex = element.selectedIndex,
                    prevOption = element.options[prevIndex],
                    triggerChange = true;

                // Don't close on multi choice menu
                if (that.multiple && that.options.maxOptions !== 1) {
                    e.stopPropagation();
                }

                e.preventDefault();

                // Don't run if the select is disabled
                if (
                    !that.isDisabled() &&
                    !$this.parent().hasClass(classNames.DISABLED)
                ) {
                    var option = clickedData.option,
                        $option = $(option),
                        state = option.selected,
                        $optgroup = $option.parent("optgroup"),
                        $optgroupOptions = $optgroup.find("option"),
                        maxOptions = that.options.maxOptions,
                        maxOptionsGrp = $optgroup.data("maxOptions") || false;

                    if (clickedIndex === that.activeIndex) retainActive = true;

                    if (!retainActive) {
                        that.prevActiveIndex = that.activeIndex;
                        that.activeIndex = undefined;
                    }

                    if (!that.multiple) {
                        // Deselect all others if not multi select box
                        if (prevOption) prevOption.selected = false;
                        option.selected = true;
                        that.setSelected(clickedIndex, true);
                    } else {
                        // Toggle the one we have chosen if we are multi select.
                        option.selected = !state;

                        that.setSelected(clickedIndex, !state);
                        that.focusedParent.focus();

                        if (maxOptions !== false || maxOptionsGrp !== false) {
                            var maxReached =
                                    maxOptions <
                                    getSelectedOptions(element).length,
                                maxReachedGrp =
                                    maxOptionsGrp <
                                    $optgroup.find("option:selected").length;

                            if (
                                (maxOptions && maxReached) ||
                                (maxOptionsGrp && maxReachedGrp)
                            ) {
                                if (maxOptions && maxOptions == 1) {
                                    element.selectedIndex = -1;
                                    option.selected = true;
                                    that.setOptionStatus(true);
                                } else if (
                                    maxOptionsGrp &&
                                    maxOptionsGrp == 1
                                ) {
                                    for (
                                        var i = 0;
                                        i < $optgroupOptions.length;
                                        i++
                                    ) {
                                        var _option = $optgroupOptions[i];
                                        _option.selected = false;
                                        that.setSelected(
                                            _option.liIndex,
                                            false
                                        );
                                    }

                                    option.selected = true;
                                    that.setSelected(clickedIndex, true);
                                } else {
                                    var maxOptionsText =
                                            typeof that.options
                                                .maxOptionsText === "string"
                                                ? [
                                                      that.options
                                                          .maxOptionsText,
                                                      that.options
                                                          .maxOptionsText,
                                                  ]
                                                : that.options.maxOptionsText,
                                        maxOptionsArr =
                                            typeof maxOptionsText === "function"
                                                ? maxOptionsText(
                                                      maxOptions,
                                                      maxOptionsGrp
                                                  )
                                                : maxOptionsText,
                                        maxTxt = maxOptionsArr[0].replace(
                                            "{n}",
                                            maxOptions
                                        ),
                                        maxTxtGrp = maxOptionsArr[1].replace(
                                            "{n}",
                                            maxOptionsGrp
                                        ),
                                        $notify = $(
                                            '<div class="notify"></div>'
                                        );
                                    // If {var} is set in array, replace it
                                    /** @deprecated */
                                    if (maxOptionsArr[2]) {
                                        maxTxt = maxTxt.replace(
                                            "{var}",
                                            maxOptionsArr[2][
                                                maxOptions > 1 ? 0 : 1
                                            ]
                                        );
                                        maxTxtGrp = maxTxtGrp.replace(
                                            "{var}",
                                            maxOptionsArr[2][
                                                maxOptionsGrp > 1 ? 0 : 1
                                            ]
                                        );
                                    }

                                    option.selected = false;

                                    that.$menu.append($notify);

                                    if (maxOptions && maxReached) {
                                        $notify.append(
                                            $("<div>" + maxTxt + "</div>")
                                        );
                                        triggerChange = false;
                                        that.$element.trigger(
                                            "maxReached" + EVENT_KEY
                                        );
                                    }

                                    if (maxOptionsGrp && maxReachedGrp) {
                                        $notify.append(
                                            $("<div>" + maxTxtGrp + "</div>")
                                        );
                                        triggerChange = false;
                                        that.$element.trigger(
                                            "maxReachedGrp" + EVENT_KEY
                                        );
                                    }

                                    setTimeout(function () {
                                        that.setSelected(clickedIndex, false);
                                    }, 10);

                                    $notify[0].classList.add("fadeOut");

                                    setTimeout(function () {
                                        $notify.remove();
                                    }, 1050);
                                }
                            }
                        }
                    }

                    if (
                        !that.multiple ||
                        (that.multiple && that.options.maxOptions === 1)
                    ) {
                        that.$button.trigger("focus");
                    } else if (that.options.liveSearch) {
                        that.$searchbox.trigger("focus");
                    }

                    // Trigger select 'change'
                    if (triggerChange) {
                        if (
                            that.multiple ||
                            prevIndex !== element.selectedIndex
                        ) {
                            // $option.prop('selected') is current option state (selected/unselected). prevValue is the value of the select prior to being changed.
                            changedArguments = [
                                option.index,
                                $option.prop("selected"),
                                prevValue,
                            ];
                            that.$element.triggerNative("change");
                        }
                    }
                }
            });

            this.$menu.on(
                "click",
                "li." +
                    classNames.DISABLED +
                    " a, ." +
                    classNames.POPOVERHEADER +
                    ", ." +
                    classNames.POPOVERHEADER +
                    " :not(.close)",
                function (e) {
                    if (e.currentTarget == this) {
                        e.preventDefault();
                        e.stopPropagation();
                        if (
                            that.options.liveSearch &&
                            !$(e.target).hasClass("close")
                        ) {
                            that.$searchbox.trigger("focus");
                        } else {
                            that.$button.trigger("focus");
                        }
                    }
                }
            );

            this.$menuInner.on(
                "click",
                ".divider, .dropdown-header",
                function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (that.options.liveSearch) {
                        that.$searchbox.trigger("focus");
                    } else {
                        that.$button.trigger("focus");
                    }
                }
            );

            this.$menu.on(
                "click",
                "." + classNames.POPOVERHEADER + " .close",
                function () {
                    that.$button.trigger("click");
                }
            );

            this.$searchbox.on("click", function (e) {
                e.stopPropagation();
            });

            this.$menu.on("click", ".actions-btn", function (e) {
                if (that.options.liveSearch) {
                    that.$searchbox.trigger("focus");
                } else {
                    that.$button.trigger("focus");
                }

                e.preventDefault();
                e.stopPropagation();

                if ($(this).hasClass("bs-select-all")) {
                    that.selectAll();
                } else {
                    that.deselectAll();
                }
            });

            this.$button
                .on("focus" + EVENT_KEY, function (e) {
                    var tabindex = that.$element[0].getAttribute("tabindex");

                    // only change when button is actually focused
                    if (
                        tabindex !== undefined &&
                        e.originalEvent &&
                        e.originalEvent.isTrusted
                    ) {
                        // apply select element's tabindex to ensure correct order is followed when tabbing to the next element
                        this.setAttribute("tabindex", tabindex);
                        // set element's tabindex to -1 to allow for reverse tabbing
                        that.$element[0].setAttribute("tabindex", -1);
                        that.selectpicker.view.tabindex = tabindex;
                    }
                })
                .on("blur" + EVENT_KEY, function (e) {
                    // revert everything to original tabindex
                    if (
                        that.selectpicker.view.tabindex !== undefined &&
                        e.originalEvent &&
                        e.originalEvent.isTrusted
                    ) {
                        that.$element[0].setAttribute(
                            "tabindex",
                            that.selectpicker.view.tabindex
                        );
                        this.setAttribute("tabindex", -1);
                        that.selectpicker.view.tabindex = undefined;
                    }
                });

            this.$element
                .on("change" + EVENT_KEY, function () {
                    that.render();
                    that.$element.trigger(
                        "changed" + EVENT_KEY,
                        changedArguments
                    );
                    changedArguments = null;
                })
                .on("focus" + EVENT_KEY, function () {
                    if (!that.options.mobile) that.$button[0].focus();
                });
        },

        liveSearchListener: function () {
            var that = this;

            this.$button.on("click.bs.dropdown.data-api", function () {
                if (!!that.$searchbox.val()) {
                    that.$searchbox.val("");
                    that.selectpicker.search.previousValue = undefined;
                }
            });

            this.$searchbox.on(
                "click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api",
                function (e) {
                    e.stopPropagation();
                }
            );

            this.$searchbox.on("input propertychange", function () {
                var searchValue = that.$searchbox[0].value;

                that.selectpicker.search.elements = [];
                that.selectpicker.search.data = [];

                if (searchValue) {
                    var i,
                        searchMatch = [],
                        q = searchValue.toUpperCase(),
                        cache = {},
                        cacheArr = [],
                        searchStyle = that._searchStyle(),
                        normalizeSearch = that.options.liveSearchNormalize;

                    if (normalizeSearch) q = normalizeToBase(q);

                    for (
                        var i = 0;
                        i < that.selectpicker.main.data.length;
                        i++
                    ) {
                        var li = that.selectpicker.main.data[i];

                        if (!cache[i]) {
                            cache[i] = stringSearch(
                                li,
                                q,
                                searchStyle,
                                normalizeSearch
                            );
                        }

                        if (
                            cache[i] &&
                            li.headerIndex !== undefined &&
                            cacheArr.indexOf(li.headerIndex) === -1
                        ) {
                            if (li.headerIndex > 0) {
                                cache[li.headerIndex - 1] = true;
                                cacheArr.push(li.headerIndex - 1);
                            }

                            cache[li.headerIndex] = true;
                            cacheArr.push(li.headerIndex);

                            cache[li.lastIndex + 1] = true;
                        }

                        if (cache[i] && li.type !== "optgroup-label")
                            cacheArr.push(i);
                    }

                    for (
                        var i = 0, cacheLen = cacheArr.length;
                        i < cacheLen;
                        i++
                    ) {
                        var index = cacheArr[i],
                            prevIndex = cacheArr[i - 1],
                            li = that.selectpicker.main.data[index],
                            liPrev = that.selectpicker.main.data[prevIndex];

                        if (
                            li.type !== "divider" ||
                            (li.type === "divider" &&
                                liPrev &&
                                liPrev.type !== "divider" &&
                                cacheLen - 1 !== i)
                        ) {
                            that.selectpicker.search.data.push(li);
                            searchMatch.push(
                                that.selectpicker.main.elements[index]
                            );
                        }
                    }

                    that.activeIndex = undefined;
                    that.noScroll = true;
                    that.$menuInner.scrollTop(0);
                    that.selectpicker.search.elements = searchMatch;
                    that.createView(true);
                    showNoResults.call(that, searchMatch, searchValue);
                } else if (that.selectpicker.search.previousValue) {
                    // for IE11 (#2402)
                    that.$menuInner.scrollTop(0);
                    that.createView(false);
                }

                that.selectpicker.search.previousValue = searchValue;
            });
        },

        _searchStyle: function () {
            return this.options.liveSearchStyle || "contains";
        },

        val: function (value) {
            var element = this.$element[0];

            if (typeof value !== "undefined") {
                var prevValue = getSelectValues(element);

                changedArguments = [null, null, prevValue];

                this.$element
                    .val(value)
                    .trigger("changed" + EVENT_KEY, changedArguments);

                if (this.$newElement.hasClass(classNames.SHOW)) {
                    if (this.multiple) {
                        this.setOptionStatus(true);
                    } else {
                        var liSelectedIndex = (
                            element.options[element.selectedIndex] || {}
                        ).liIndex;

                        if (typeof liSelectedIndex === "number") {
                            this.setSelected(this.selectedIndex, false);
                            this.setSelected(liSelectedIndex, true);
                        }
                    }
                }

                this.render();

                changedArguments = null;

                return this.$element;
            } else {
                return this.$element.val();
            }
        },

        changeAll: function (status) {
            if (!this.multiple) return;
            if (typeof status === "undefined") status = true;

            var element = this.$element[0],
                previousSelected = 0,
                currentSelected = 0,
                prevValue = getSelectValues(element);

            element.classList.add("bs-select-hidden");

            for (
                var i = 0,
                    data = this.selectpicker.current.data,
                    len = data.length;
                i < len;
                i++
            ) {
                var liData = data[i],
                    option = liData.option;

                if (option && !liData.disabled && liData.type !== "divider") {
                    if (liData.selected) previousSelected++;
                    option.selected = status;
                    if (status === true) currentSelected++;
                }
            }

            element.classList.remove("bs-select-hidden");

            if (previousSelected === currentSelected) return;

            this.setOptionStatus();

            changedArguments = [null, null, prevValue];

            this.$element.triggerNative("change");
        },

        selectAll: function () {
            return this.changeAll(true);
        },

        deselectAll: function () {
            return this.changeAll(false);
        },

        toggle: function (e) {
            e = e || window.event;

            if (e) e.stopPropagation();

            this.$button.trigger("click.bs.dropdown.data-api");
        },

        keydown: function (e) {
            var $this = $(this),
                isToggle = $this.hasClass("dropdown-toggle"),
                $parent = isToggle
                    ? $this.closest(".dropdown")
                    : $this.closest(Selector.MENU),
                that = $parent.data("this"),
                $items = that.findLis(),
                index,
                isActive,
                liActive,
                activeLi,
                offset,
                updateScroll = false,
                downOnTab =
                    e.which === keyCodes.TAB &&
                    !isToggle &&
                    !that.options.selectOnTab,
                isArrowKey = REGEXP_ARROW.test(e.which) || downOnTab,
                scrollTop = that.$menuInner[0].scrollTop,
                isVirtual = that.isVirtual(),
                position0 =
                    isVirtual === true ? that.selectpicker.view.position0 : 0;

            // do nothing if a function key is pressed
            if (e.which >= 112 && e.which <= 123) return;

            isActive = that.$newElement.hasClass(classNames.SHOW);

            if (
                !isActive &&
                (isArrowKey ||
                    (e.which >= 48 && e.which <= 57) ||
                    (e.which >= 96 && e.which <= 105) ||
                    (e.which >= 65 && e.which <= 90))
            ) {
                that.$button.trigger("click.bs.dropdown.data-api");

                if (that.options.liveSearch) {
                    that.$searchbox.trigger("focus");
                    return;
                }
            }

            if (e.which === keyCodes.ESCAPE && isActive) {
                e.preventDefault();
                that.$button
                    .trigger("click.bs.dropdown.data-api")
                    .trigger("focus");
            }

            if (isArrowKey) {
                // if up or down
                if (!$items.length) return;

                liActive = that.selectpicker.main.elements[that.activeIndex];
                index = liActive
                    ? Array.prototype.indexOf.call(
                          liActive.parentElement.children,
                          liActive
                      )
                    : -1;

                if (index !== -1) {
                    that.defocusItem(liActive);
                }

                if (e.which === keyCodes.ARROW_UP) {
                    // up
                    if (index !== -1) index--;
                    if (index + position0 < 0) index += $items.length;

                    if (
                        !that.selectpicker.view.canHighlight[index + position0]
                    ) {
                        index =
                            that.selectpicker.view.canHighlight
                                .slice(0, index + position0)
                                .lastIndexOf(true) - position0;
                        if (index === -1) index = $items.length - 1;
                    }
                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) {
                    // down
                    index++;
                    if (
                        index + position0 >=
                        that.selectpicker.view.canHighlight.length
                    )
                        index = that.selectpicker.view.firstHighlightIndex;

                    if (
                        !that.selectpicker.view.canHighlight[index + position0]
                    ) {
                        index =
                            index +
                            1 +
                            that.selectpicker.view.canHighlight
                                .slice(index + position0 + 1)
                                .indexOf(true);
                    }
                }

                e.preventDefault();

                var liActiveIndex = position0 + index;

                if (e.which === keyCodes.ARROW_UP) {
                    // up
                    // scroll to bottom and highlight last option
                    if (position0 === 0 && index === $items.length - 1) {
                        that.$menuInner[0].scrollTop =
                            that.$menuInner[0].scrollHeight;

                        liActiveIndex =
                            that.selectpicker.current.elements.length - 1;
                    } else {
                        activeLi =
                            that.selectpicker.current.data[liActiveIndex];
                        offset = activeLi.position - activeLi.height;

                        updateScroll = offset < scrollTop;
                    }
                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) {
                    // down
                    // scroll to top and highlight first option
                    if (index === that.selectpicker.view.firstHighlightIndex) {
                        that.$menuInner[0].scrollTop = 0;

                        liActiveIndex =
                            that.selectpicker.view.firstHighlightIndex;
                    } else {
                        activeLi =
                            that.selectpicker.current.data[liActiveIndex];
                        offset =
                            activeLi.position - that.sizeInfo.menuInnerHeight;

                        updateScroll = offset > scrollTop;
                    }
                }

                liActive = that.selectpicker.current.elements[liActiveIndex];

                that.activeIndex =
                    that.selectpicker.current.data[liActiveIndex].index;

                that.focusItem(liActive);

                that.selectpicker.view.currentActive = liActive;

                if (updateScroll) that.$menuInner[0].scrollTop = offset;

                if (that.options.liveSearch) {
                    that.$searchbox.trigger("focus");
                } else {
                    $this.trigger("focus");
                }
            } else if (
                (!$this.is("input") && !REGEXP_TAB_OR_ESCAPE.test(e.which)) ||
                (e.which === keyCodes.SPACE &&
                    that.selectpicker.keydown.keyHistory)
            ) {
                var searchMatch,
                    matches = [],
                    keyHistory;

                e.preventDefault();

                that.selectpicker.keydown.keyHistory += keyCodeMap[e.which];

                if (that.selectpicker.keydown.resetKeyHistory.cancel)
                    clearTimeout(
                        that.selectpicker.keydown.resetKeyHistory.cancel
                    );
                that.selectpicker.keydown.resetKeyHistory.cancel =
                    that.selectpicker.keydown.resetKeyHistory.start();

                keyHistory = that.selectpicker.keydown.keyHistory;

                // if all letters are the same, set keyHistory to just the first character when searching
                if (/^(.)\1+$/.test(keyHistory)) {
                    keyHistory = keyHistory.charAt(0);
                }

                // find matches
                for (
                    var i = 0;
                    i < that.selectpicker.current.data.length;
                    i++
                ) {
                    var li = that.selectpicker.current.data[i],
                        hasMatch;

                    hasMatch = stringSearch(li, keyHistory, "startsWith", true);

                    if (hasMatch && that.selectpicker.view.canHighlight[i]) {
                        matches.push(li.index);
                    }
                }

                if (matches.length) {
                    var matchIndex = 0;

                    $items
                        .removeClass("active")
                        .find("a")
                        .removeClass("active");

                    // either only one key has been pressed or they are all the same key
                    if (keyHistory.length === 1) {
                        matchIndex = matches.indexOf(that.activeIndex);

                        if (
                            matchIndex === -1 ||
                            matchIndex === matches.length - 1
                        ) {
                            matchIndex = 0;
                        } else {
                            matchIndex++;
                        }
                    }

                    searchMatch = matches[matchIndex];

                    activeLi = that.selectpicker.main.data[searchMatch];

                    if (scrollTop - activeLi.position > 0) {
                        offset = activeLi.position - activeLi.height;
                        updateScroll = true;
                    } else {
                        offset =
                            activeLi.position - that.sizeInfo.menuInnerHeight;
                        // if the option is already visible at the current scroll position, just keep it the same
                        updateScroll =
                            activeLi.position >
                            scrollTop + that.sizeInfo.menuInnerHeight;
                    }

                    liActive = that.selectpicker.main.elements[searchMatch];

                    that.activeIndex = matches[matchIndex];

                    that.focusItem(liActive);

                    if (liActive) liActive.firstChild.focus();

                    if (updateScroll) that.$menuInner[0].scrollTop = offset;

                    $this.trigger("focus");
                }
            }

            // Select focused option if "Enter", "Spacebar" or "Tab" (when selectOnTab is true) are pressed inside the menu.
            if (
                isActive &&
                ((e.which === keyCodes.SPACE &&
                    !that.selectpicker.keydown.keyHistory) ||
                    e.which === keyCodes.ENTER ||
                    (e.which === keyCodes.TAB && that.options.selectOnTab))
            ) {
                if (e.which !== keyCodes.SPACE) e.preventDefault();

                if (!that.options.liveSearch || e.which !== keyCodes.SPACE) {
                    that.$menuInner.find(".active a").trigger("click", true); // retain active class
                    $this.trigger("focus");

                    if (!that.options.liveSearch) {
                        // Prevent screen from scrolling if the user hits the spacebar
                        e.preventDefault();
                        // Fixes spacebar selection of dropdown items in FF & IE
                        $(document).data("spaceSelect", true);
                    }
                }
            }
        },

        mobile: function () {
            // ensure mobile is set to true if mobile function is called after init
            this.options.mobile = true;
            this.$element[0].classList.add("mobile-device");
        },

        refresh: function () {
            // update options if data attributes have been changed
            var config = $.extend({}, this.options, this.$element.data());
            this.options = config;

            this.checkDisabled();
            this.buildData();
            this.setStyle();
            this.render();
            this.buildList();
            this.setWidth();

            this.setSize(true);

            this.$element.trigger("refreshed" + EVENT_KEY);
        },

        hide: function () {
            this.$newElement.hide();
        },

        show: function () {
            this.$newElement.show();
        },

        remove: function () {
            this.$newElement.remove();
            this.$element.remove();
        },

        destroy: function () {
            this.$newElement.before(this.$element).remove();

            if (this.$bsContainer) {
                this.$bsContainer.remove();
            } else {
                this.$menu.remove();
            }

            if (
                this.selectpicker.view.titleOption &&
                this.selectpicker.view.titleOption.parentNode
            ) {
                this.selectpicker.view.titleOption.parentNode.removeChild(
                    this.selectpicker.view.titleOption
                );
            }

            this.$element
                .off(EVENT_KEY)
                .removeData("selectpicker")
                .removeClass("bs-select-hidden selectpicker");

            $(window).off(EVENT_KEY + "." + this.selectId);
        },
    };

    // SELECTPICKER PLUGIN DEFINITION
    // ==============================
    function Plugin(option) {
        // get the args of the outer function..
        var args = arguments;
        // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them
        // to get lost/corrupted in android 2.3 and IE9 #715 #775
        var _option = option;

        [].shift.apply(args);

        // if the version was not set successfully
        if (!version.success) {
            // try to retreive it again
            try {
                version.full = ($.fn.dropdown.Constructor.VERSION || "")
                    .split(" ")[0]
                    .split(".");
            } catch (err) {
                // fall back to use BootstrapVersion if set
                if (Selectpicker.BootstrapVersion) {
                    version.full =
                        Selectpicker.BootstrapVersion.split(" ")[0].split(".");
                } else {
                    version.full = [version.major, "0", "0"];

                    console.warn(
                        "There was an issue retrieving Bootstrap's version. " +
                            "Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. " +
                            "If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.",
                        err
                    );
                }
            }

            version.major = version.full[0];
            version.success = true;
        }

        if (version.major === "4") {
            // some defaults need to be changed if using Bootstrap 4
            // check to see if they have already been manually changed before forcing them to update
            var toUpdate = [];

            if (Selectpicker.DEFAULTS.style === classNames.BUTTONCLASS)
                toUpdate.push({ name: "style", className: "BUTTONCLASS" });
            if (Selectpicker.DEFAULTS.iconBase === classNames.ICONBASE)
                toUpdate.push({ name: "iconBase", className: "ICONBASE" });
            if (Selectpicker.DEFAULTS.tickIcon === classNames.TICKICON)
                toUpdate.push({ name: "tickIcon", className: "TICKICON" });

            classNames.DIVIDER = "dropdown-divider";
            classNames.SHOW = "show";
            classNames.BUTTONCLASS = "btn-light";
            classNames.POPOVERHEADER = "popover-header";
            classNames.ICONBASE = "";
            classNames.TICKICON = "bs-ok-default";

            for (var i = 0; i < toUpdate.length; i++) {
                var option = toUpdate[i];
                Selectpicker.DEFAULTS[option.name] =
                    classNames[option.className];
            }
        }

        var value;
        var chain = this.each(function () {
            var $this = $(this);
            if ($this.is("select")) {
                var data = $this.data("selectpicker"),
                    options = typeof _option == "object" && _option;

                if (!data) {
                    var dataAttributes = $this.data();

                    for (var dataAttr in dataAttributes) {
                        if (
                            Object.prototype.hasOwnProperty.call(
                                dataAttributes,
                                dataAttr
                            ) &&
                            $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1
                        ) {
                            delete dataAttributes[dataAttr];
                        }
                    }

                    var config = $.extend(
                        {},
                        Selectpicker.DEFAULTS,
                        $.fn.selectpicker.defaults || {},
                        dataAttributes,
                        options
                    );
                    config.template = $.extend(
                        {},
                        Selectpicker.DEFAULTS.template,
                        $.fn.selectpicker.defaults
                            ? $.fn.selectpicker.defaults.template
                            : {},
                        dataAttributes.template,
                        options.template
                    );
                    $this.data(
                        "selectpicker",
                        (data = new Selectpicker(this, config))
                    );
                } else if (options) {
                    for (var i in options) {
                        if (Object.prototype.hasOwnProperty.call(options, i)) {
                            data.options[i] = options[i];
                        }
                    }
                }

                if (typeof _option == "string") {
                    if (data[_option] instanceof Function) {
                        value = data[_option].apply(data, args);
                    } else {
                        value = data.options[_option];
                    }
                }
            }
        });

        if (typeof value !== "undefined") {
            // noinspection JSUnusedAssignment
            return value;
        } else {
            return chain;
        }
    }

    var old = $.fn.selectpicker;
    $.fn.selectpicker = Plugin;
    $.fn.selectpicker.Constructor = Selectpicker;

    // SELECTPICKER NO CONFLICT
    // ========================
    $.fn.selectpicker.noConflict = function () {
        $.fn.selectpicker = old;
        return this;
    };

    // get Bootstrap's keydown event handler for either Bootstrap 4 or Bootstrap 3
    function keydownHandler() {
        if ($.fn.dropdown) {
            // wait to define until function is called in case Bootstrap isn't loaded yet
            var bootstrapKeydown =
                $.fn.dropdown.Constructor._dataApiKeydownHandler ||
                $.fn.dropdown.Constructor.prototype.keydown;
            return bootstrapKeydown.apply(this, arguments);
        }
    }

    $(document)
        .off("keydown.bs.dropdown.data-api")
        .on(
            "keydown.bs.dropdown.data-api",
            ':not(.bootstrap-select) > [data-toggle="dropdown"]',
            keydownHandler
        )
        .on(
            "keydown.bs.dropdown.data-api",
            ":not(.bootstrap-select) > .dropdown-menu",
            keydownHandler
        )
        .on(
            "keydown" + EVENT_KEY,
            '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input',
            Selectpicker.prototype.keydown
        )
        .on(
            "focusin.modal",
            '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input',
            function (e) {
                e.stopPropagation();
            }
        );

    // SELECTPICKER DATA-API
    // =====================
    $(window).on("load" + EVENT_KEY + ".data-api", function () {
        $(".selectpicker").each(function () {
            var $selectpicker = $(this);
            Plugin.call($selectpicker, $selectpicker.data());
        });
    });
})(jQuery);

/*!
 * sweetalert2 v11.10.3
 * Released under the MIT License.
 */
!(function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
        ? (module.exports = e())
        : "function" == typeof define && define.amd
        ? define(e)
        : ((t =
              "undefined" != typeof globalThis
                  ? globalThis
                  : t || self).Sweetalert2 = e());
})(this, function () {
    "use strict";
    function t(t) {
        var e = (function (t, e) {
            if ("object" != typeof t || !t) return t;
            var n = t[Symbol.toPrimitive];
            if (void 0 !== n) {
                var o = n.call(t, e || "default");
                if ("object" != typeof o) return o;
                throw new TypeError(
                    "@@toPrimitive must return a primitive value."
                );
            }
            return ("string" === e ? String : Number)(t);
        })(t, "string");
        return "symbol" == typeof e ? e : String(e);
    }
    function e(t) {
        return (
            (e =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                    ? function (t) {
                          return typeof t;
                      }
                    : function (t) {
                          return t &&
                              "function" == typeof Symbol &&
                              t.constructor === Symbol &&
                              t !== Symbol.prototype
                              ? "symbol"
                              : typeof t;
                      }),
            e(t)
        );
    }
    function n(t, e) {
        if (!(t instanceof e))
            throw new TypeError("Cannot call a class as a function");
    }
    function o(e, n) {
        for (var o = 0; o < n.length; o++) {
            var i = n[o];
            (i.enumerable = i.enumerable || !1),
                (i.configurable = !0),
                "value" in i && (i.writable = !0),
                Object.defineProperty(e, t(i.key), i);
        }
    }
    function i(t, e, n) {
        return (
            e && o(t.prototype, e),
            n && o(t, n),
            Object.defineProperty(t, "prototype", { writable: !1 }),
            t
        );
    }
    function r(t) {
        return (
            (r = Object.setPrototypeOf
                ? Object.getPrototypeOf.bind()
                : function (t) {
                      return t.__proto__ || Object.getPrototypeOf(t);
                  }),
            r(t)
        );
    }
    function a(t, e) {
        return (
            (a = Object.setPrototypeOf
                ? Object.setPrototypeOf.bind()
                : function (t, e) {
                      return (t.__proto__ = e), t;
                  }),
            a(t, e)
        );
    }
    function c() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
            return (
                Boolean.prototype.valueOf.call(
                    Reflect.construct(Boolean, [], function () {})
                ),
                !0
            );
        } catch (t) {
            return !1;
        }
    }
    function u(t, e, n) {
        return (
            (u = c()
                ? Reflect.construct.bind()
                : function (t, e, n) {
                      var o = [null];
                      o.push.apply(o, e);
                      var i = new (Function.bind.apply(t, o))();
                      return n && a(i, n.prototype), i;
                  }),
            u.apply(null, arguments)
        );
    }
    function s(t, e) {
        if (e && ("object" == typeof e || "function" == typeof e)) return e;
        if (void 0 !== e)
            throw new TypeError(
                "Derived constructors may only return object or undefined"
            );
        return (function (t) {
            if (void 0 === t)
                throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                );
            return t;
        })(t);
    }
    function l() {
        return (
            (l =
                "undefined" != typeof Reflect && Reflect.get
                    ? Reflect.get.bind()
                    : function (t, e, n) {
                          var o = (function (t, e) {
                              for (
                                  ;
                                  !Object.prototype.hasOwnProperty.call(t, e) &&
                                  null !== (t = r(t));

                              );
                              return t;
                          })(t, e);
                          if (o) {
                              var i = Object.getOwnPropertyDescriptor(o, e);
                              return i.get
                                  ? i.get.call(arguments.length < 3 ? t : n)
                                  : i.value;
                          }
                      }),
            l.apply(this, arguments)
        );
    }
    function d(t, e) {
        return (
            (function (t) {
                if (Array.isArray(t)) return t;
            })(t) ||
            (function (t, e) {
                var n =
                    null == t
                        ? null
                        : ("undefined" != typeof Symbol &&
                              t[Symbol.iterator]) ||
                          t["@@iterator"];
                if (null != n) {
                    var o,
                        i,
                        r,
                        a,
                        c = [],
                        u = !0,
                        s = !1;
                    try {
                        if (((r = (n = n.call(t)).next), 0 === e)) {
                            if (Object(n) !== n) return;
                            u = !1;
                        } else
                            for (
                                ;
                                !(u = (o = r.call(n)).done) &&
                                (c.push(o.value), c.length !== e);
                                u = !0
                            );
                    } catch (t) {
                        (s = !0), (i = t);
                    } finally {
                        try {
                            if (
                                !u &&
                                null != n.return &&
                                ((a = n.return()), Object(a) !== a)
                            )
                                return;
                        } finally {
                            if (s) throw i;
                        }
                    }
                    return c;
                }
            })(t, e) ||
            p(t, e) ||
            (function () {
                throw new TypeError(
                    "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
            })()
        );
    }
    function f(t) {
        return (
            (function (t) {
                if (Array.isArray(t)) return m(t);
            })(t) ||
            (function (t) {
                if (
                    ("undefined" != typeof Symbol &&
                        null != t[Symbol.iterator]) ||
                    null != t["@@iterator"]
                )
                    return Array.from(t);
            })(t) ||
            p(t) ||
            (function () {
                throw new TypeError(
                    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
            })()
        );
    }
    function p(t, e) {
        if (t) {
            if ("string" == typeof t) return m(t, e);
            var n = Object.prototype.toString.call(t).slice(8, -1);
            return (
                "Object" === n && t.constructor && (n = t.constructor.name),
                "Map" === n || "Set" === n
                    ? Array.from(t)
                    : "Arguments" === n ||
                      /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                    ? m(t, e)
                    : void 0
            );
        }
    }
    function m(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var n = 0, o = new Array(e); n < e; n++) o[n] = t[n];
        return o;
    }
    function h(t, e) {
        return (function (t, e) {
            if (e.get) return e.get.call(t);
            return e.value;
        })(t, g(t, e, "get"));
    }
    function v(t, e, n) {
        return (
            (function (t, e, n) {
                if (e.set) e.set.call(t, n);
                else {
                    if (!e.writable)
                        throw new TypeError(
                            "attempted to set read only private field"
                        );
                    e.value = n;
                }
            })(t, g(t, e, "set"), n),
            n
        );
    }
    function g(t, e, n) {
        if (!e.has(t))
            throw new TypeError(
                "attempted to " + n + " private field on non-instance"
            );
        return e.get(t);
    }
    function b(t, e, n) {
        !(function (t, e) {
            if (e.has(t))
                throw new TypeError(
                    "Cannot initialize the same private elements twice on an object"
                );
        })(t, e),
            e.set(t, n);
    }
    var y = {},
        w = function (t) {
            return new Promise(function (e) {
                if (!t) return e();
                var n = window.scrollX,
                    o = window.scrollY;
                (y.restoreFocusTimeout = setTimeout(function () {
                    y.previousActiveElement instanceof HTMLElement
                        ? (y.previousActiveElement.focus(),
                          (y.previousActiveElement = null))
                        : document.body && document.body.focus(),
                        e();
                }, 100)),
                    window.scrollTo(n, o);
            });
        },
        C = "swal2-",
        A = [
            "container",
            "shown",
            "height-auto",
            "iosfix",
            "popup",
            "modal",
            "no-backdrop",
            "no-transition",
            "toast",
            "toast-shown",
            "show",
            "hide",
            "close",
            "title",
            "html-container",
            "actions",
            "confirm",
            "deny",
            "cancel",
            "default-outline",
            "footer",
            "icon",
            "icon-content",
            "image",
            "input",
            "file",
            "range",
            "select",
            "radio",
            "checkbox",
            "label",
            "textarea",
            "inputerror",
            "input-label",
            "validation-message",
            "progress-steps",
            "active-progress-step",
            "progress-step",
            "progress-step-line",
            "loader",
            "loading",
            "styled",
            "top",
            "top-start",
            "top-end",
            "top-left",
            "top-right",
            "center",
            "center-start",
            "center-end",
            "center-left",
            "center-right",
            "bottom",
            "bottom-start",
            "bottom-end",
            "bottom-left",
            "bottom-right",
            "grow-row",
            "grow-column",
            "grow-fullscreen",
            "rtl",
            "timer-progress-bar",
            "timer-progress-bar-container",
            "scrollbar-measure",
            "icon-success",
            "icon-warning",
            "icon-info",
            "icon-question",
            "icon-error",
        ].reduce(function (t, e) {
            return (t[e] = C + e), t;
        }, {}),
        k = ["success", "warning", "info", "question", "error"].reduce(
            function (t, e) {
                return (t[e] = C + e), t;
            },
            {}
        ),
        E = "SweetAlert2:",
        P = function (t) {
            return t.charAt(0).toUpperCase() + t.slice(1);
        },
        B = function (t) {
            console.warn(
                "".concat(E, " ").concat("object" === e(t) ? t.join(" ") : t)
            );
        },
        T = function (t) {
            console.error("".concat(E, " ").concat(t));
        },
        x = [],
        S = function (t, e) {
            var n;
            (n = '"'
                .concat(
                    t,
                    '" is deprecated and will be removed in the next major release. Please use "'
                )
                .concat(e, '" instead.')),
                x.includes(n) || (x.push(n), B(n));
        },
        O = function (t) {
            return "function" == typeof t ? t() : t;
        },
        L = function (t) {
            return t && "function" == typeof t.toPromise;
        },
        j = function (t) {
            return L(t) ? t.toPromise() : Promise.resolve(t);
        },
        M = function (t) {
            return t && Promise.resolve(t) === t;
        },
        I = function () {
            return document.body.querySelector(".".concat(A.container));
        },
        H = function (t) {
            var e = I();
            return e ? e.querySelector(t) : null;
        },
        D = function (t) {
            return H(".".concat(t));
        },
        q = function () {
            return D(A.popup);
        },
        V = function () {
            return D(A.icon);
        },
        R = function () {
            return D(A.title);
        },
        _ = function () {
            return D(A["html-container"]);
        },
        N = function () {
            return D(A.image);
        },
        F = function () {
            return D(A["progress-steps"]);
        },
        U = function () {
            return D(A["validation-message"]);
        },
        z = function () {
            return H(".".concat(A.actions, " .").concat(A.confirm));
        },
        W = function () {
            return H(".".concat(A.actions, " .").concat(A.cancel));
        },
        K = function () {
            return H(".".concat(A.actions, " .").concat(A.deny));
        },
        Y = function () {
            return H(".".concat(A.loader));
        },
        Z = function () {
            return D(A.actions);
        },
        $ = function () {
            return D(A.footer);
        },
        J = function () {
            return D(A["timer-progress-bar"]);
        },
        X = function () {
            return D(A.close);
        },
        G = function () {
            var t = q();
            if (!t) return [];
            var e = t.querySelectorAll(
                    '[tabindex]:not([tabindex="-1"]):not([tabindex="0"])'
                ),
                n = Array.from(e).sort(function (t, e) {
                    var n = parseInt(t.getAttribute("tabindex") || "0"),
                        o = parseInt(e.getAttribute("tabindex") || "0");
                    return n > o ? 1 : n < o ? -1 : 0;
                }),
                o = t.querySelectorAll(
                    '\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n'
                ),
                i = Array.from(o).filter(function (t) {
                    return "-1" !== t.getAttribute("tabindex");
                });
            return f(new Set(n.concat(i))).filter(function (t) {
                return vt(t);
            });
        },
        Q = function () {
            return (
                nt(document.body, A.shown) &&
                !nt(document.body, A["toast-shown"]) &&
                !nt(document.body, A["no-backdrop"])
            );
        },
        tt = function () {
            var t = q();
            return !!t && nt(t, A.toast);
        },
        et = function (t, e) {
            if (((t.textContent = ""), e)) {
                var n = new DOMParser().parseFromString(e, "text/html"),
                    o = n.querySelector("head");
                o &&
                    Array.from(o.childNodes).forEach(function (e) {
                        t.appendChild(e);
                    });
                var i = n.querySelector("body");
                i &&
                    Array.from(i.childNodes).forEach(function (e) {
                        e instanceof HTMLVideoElement ||
                        e instanceof HTMLAudioElement
                            ? t.appendChild(e.cloneNode(!0))
                            : t.appendChild(e);
                    });
            }
        },
        nt = function (t, e) {
            if (!e) return !1;
            for (var n = e.split(/\s+/), o = 0; o < n.length; o++)
                if (!t.classList.contains(n[o])) return !1;
            return !0;
        },
        ot = function (t, n, o) {
            if (
                ((function (t, e) {
                    Array.from(t.classList).forEach(function (n) {
                        Object.values(A).includes(n) ||
                            Object.values(k).includes(n) ||
                            Object.values(e.showClass || {}).includes(n) ||
                            t.classList.remove(n);
                    });
                })(t, n),
                n.customClass && n.customClass[o])
            ) {
                if (
                    "string" != typeof n.customClass[o] &&
                    !n.customClass[o].forEach
                )
                    return void B(
                        "Invalid type of customClass."
                            .concat(
                                o,
                                '! Expected string or iterable object, got "'
                            )
                            .concat(e(n.customClass[o]), '"')
                    );
                ct(t, n.customClass[o]);
            }
        },
        it = function (t, e) {
            if (!e) return null;
            switch (e) {
                case "select":
                case "textarea":
                case "file":
                    return t.querySelector(
                        ".".concat(A.popup, " > .").concat(A[e])
                    );
                case "checkbox":
                    return t.querySelector(
                        ".".concat(A.popup, " > .").concat(A.checkbox, " input")
                    );
                case "radio":
                    return (
                        t.querySelector(
                            "."
                                .concat(A.popup, " > .")
                                .concat(A.radio, " input:checked")
                        ) ||
                        t.querySelector(
                            "."
                                .concat(A.popup, " > .")
                                .concat(A.radio, " input:first-child")
                        )
                    );
                case "range":
                    return t.querySelector(
                        ".".concat(A.popup, " > .").concat(A.range, " input")
                    );
                default:
                    return t.querySelector(
                        ".".concat(A.popup, " > .").concat(A.input)
                    );
            }
        },
        rt = function (t) {
            if ((t.focus(), "file" !== t.type)) {
                var e = t.value;
                (t.value = ""), (t.value = e);
            }
        },
        at = function (t, e, n) {
            t &&
                e &&
                ("string" == typeof e && (e = e.split(/\s+/).filter(Boolean)),
                e.forEach(function (e) {
                    Array.isArray(t)
                        ? t.forEach(function (t) {
                              n ? t.classList.add(e) : t.classList.remove(e);
                          })
                        : n
                        ? t.classList.add(e)
                        : t.classList.remove(e);
                }));
        },
        ct = function (t, e) {
            at(t, e, !0);
        },
        ut = function (t, e) {
            at(t, e, !1);
        },
        st = function (t, e) {
            for (var n = Array.from(t.children), o = 0; o < n.length; o++) {
                var i = n[o];
                if (i instanceof HTMLElement && nt(i, e)) return i;
            }
        },
        lt = function (t, e, n) {
            n === "".concat(parseInt(n)) && (n = parseInt(n)),
                n || 0 === parseInt(n)
                    ? t.style.setProperty(
                          e,
                          "number" == typeof n ? "".concat(n, "px") : n
                      )
                    : t.style.removeProperty(e);
        },
        dt = function (t) {
            var e =
                arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "flex";
            t && (t.style.display = e);
        },
        ft = function (t) {
            t && (t.style.display = "none");
        },
        pt = function (t) {
            var e =
                arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "block";
            t &&
                new MutationObserver(function () {
                    ht(t, t.innerHTML, e);
                }).observe(t, { childList: !0, subtree: !0 });
        },
        mt = function (t, e, n, o) {
            var i = t.querySelector(e);
            i && i.style.setProperty(n, o);
        },
        ht = function (t, e) {
            e
                ? dt(
                      t,
                      arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : "flex"
                  )
                : ft(t);
        },
        vt = function (t) {
            return !(
                !t ||
                !(t.offsetWidth || t.offsetHeight || t.getClientRects().length)
            );
        },
        gt = function (t) {
            return !!(t.scrollHeight > t.clientHeight);
        },
        bt = function (t) {
            var e = window.getComputedStyle(t),
                n = parseFloat(e.getPropertyValue("animation-duration") || "0"),
                o = parseFloat(
                    e.getPropertyValue("transition-duration") || "0"
                );
            return n > 0 || o > 0;
        },
        yt = function (t) {
            var e =
                    arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1],
                n = J();
            n &&
                vt(n) &&
                (e && ((n.style.transition = "none"), (n.style.width = "100%")),
                setTimeout(function () {
                    (n.style.transition = "width ".concat(t / 1e3, "s linear")),
                        (n.style.width = "0%");
                }, 10));
        },
        wt = function () {
            return (
                "undefined" == typeof window || "undefined" == typeof document
            );
        },
        Ct = '\n <div aria-labelledby="'
            .concat(A.title, '" aria-describedby="')
            .concat(A["html-container"], '" class="')
            .concat(
                A.popup,
                '" tabindex="-1">\n   <button type="button" class="'
            )
            .concat(A.close, '"></button>\n   <ul class="')
            .concat(A["progress-steps"], '"></ul>\n   <div class="')
            .concat(A.icon, '"></div>\n   <img class="')
            .concat(A.image, '" />\n   <h2 class="')
            .concat(A.title, '" id="')
            .concat(A.title, '"></h2>\n   <div class="')
            .concat(A["html-container"], '" id="')
            .concat(A["html-container"], '"></div>\n   <input class="')
            .concat(A.input, '" id="')
            .concat(A.input, '" />\n   <input type="file" class="')
            .concat(A.file, '" />\n   <div class="')
            .concat(
                A.range,
                '">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="'
            )
            .concat(A.select, '" id="')
            .concat(A.select, '"></select>\n   <div class="')
            .concat(A.radio, '"></div>\n   <label class="')
            .concat(A.checkbox, '">\n     <input type="checkbox" id="')
            .concat(A.checkbox, '" />\n     <span class="')
            .concat(A.label, '"></span>\n   </label>\n   <textarea class="')
            .concat(A.textarea, '" id="')
            .concat(A.textarea, '"></textarea>\n   <div class="')
            .concat(A["validation-message"], '" id="')
            .concat(A["validation-message"], '"></div>\n   <div class="')
            .concat(A.actions, '">\n     <div class="')
            .concat(A.loader, '"></div>\n     <button type="button" class="')
            .concat(
                A.confirm,
                '"></button>\n     <button type="button" class="'
            )
            .concat(A.deny, '"></button>\n     <button type="button" class="')
            .concat(A.cancel, '"></button>\n   </div>\n   <div class="')
            .concat(A.footer, '"></div>\n   <div class="')
            .concat(A["timer-progress-bar-container"], '">\n     <div class="')
            .concat(A["timer-progress-bar"], '"></div>\n   </div>\n </div>\n')
            .replace(/(^|\n)\s*/g, ""),
        At = function () {
            y.currentInstance.resetValidationMessage();
        },
        kt = function (t) {
            var e,
                n =
                    !!(e = I()) &&
                    (e.remove(),
                    ut(
                        [document.documentElement, document.body],
                        [A["no-backdrop"], A["toast-shown"], A["has-column"]]
                    ),
                    !0);
            if (wt()) T("SweetAlert2 requires document to initialize");
            else {
                var o = document.createElement("div");
                (o.className = A.container),
                    n && ct(o, A["no-transition"]),
                    et(o, Ct);
                var i,
                    r,
                    a,
                    c,
                    u,
                    s,
                    l,
                    d,
                    f,
                    p =
                        "string" == typeof (i = t.target)
                            ? document.querySelector(i)
                            : i;
                p.appendChild(o),
                    (function (t) {
                        var e = q();
                        e.setAttribute("role", t.toast ? "alert" : "dialog"),
                            e.setAttribute(
                                "aria-live",
                                t.toast ? "polite" : "assertive"
                            ),
                            t.toast || e.setAttribute("aria-modal", "true");
                    })(t),
                    (function (t) {
                        "rtl" === window.getComputedStyle(t).direction &&
                            ct(I(), A.rtl);
                    })(p),
                    (r = q()),
                    (a = st(r, A.input)),
                    (c = st(r, A.file)),
                    (u = r.querySelector(".".concat(A.range, " input"))),
                    (s = r.querySelector(".".concat(A.range, " output"))),
                    (l = st(r, A.select)),
                    (d = r.querySelector(".".concat(A.checkbox, " input"))),
                    (f = st(r, A.textarea)),
                    (a.oninput = At),
                    (c.onchange = At),
                    (l.onchange = At),
                    (d.onchange = At),
                    (f.oninput = At),
                    (u.oninput = function () {
                        At(), (s.value = u.value);
                    }),
                    (u.onchange = function () {
                        At(), (s.value = u.value);
                    });
            }
        },
        Et = function (t, n) {
            t instanceof HTMLElement
                ? n.appendChild(t)
                : "object" === e(t)
                ? Pt(t, n)
                : t && et(n, t);
        },
        Pt = function (t, e) {
            t.jquery ? Bt(e, t) : et(e, t.toString());
        },
        Bt = function (t, e) {
            if (((t.textContent = ""), 0 in e))
                for (var n = 0; n in e; n++) t.appendChild(e[n].cloneNode(!0));
            else t.appendChild(e.cloneNode(!0));
        },
        Tt = (function () {
            if (wt()) return !1;
            var t = document.createElement("div");
            return void 0 !== t.style.webkitAnimation
                ? "webkitAnimationEnd"
                : void 0 !== t.style.animation && "animationend";
        })(),
        xt = function (t, e) {
            var n = Z(),
                o = Y();
            n &&
                o &&
                (e.showConfirmButton || e.showDenyButton || e.showCancelButton
                    ? dt(n)
                    : ft(n),
                ot(n, e, "actions"),
                (function (t, e, n) {
                    var o = z(),
                        i = K(),
                        r = W();
                    if (!o || !i || !r) return;
                    St(o, "confirm", n),
                        St(i, "deny", n),
                        St(r, "cancel", n),
                        (function (t, e, n, o) {
                            if (!o.buttonsStyling)
                                return void ut([t, e, n], A.styled);
                            ct([t, e, n], A.styled),
                                o.confirmButtonColor &&
                                    ((t.style.backgroundColor =
                                        o.confirmButtonColor),
                                    ct(t, A["default-outline"]));
                            o.denyButtonColor &&
                                ((e.style.backgroundColor = o.denyButtonColor),
                                ct(e, A["default-outline"]));
                            o.cancelButtonColor &&
                                ((n.style.backgroundColor =
                                    o.cancelButtonColor),
                                ct(n, A["default-outline"]));
                        })(o, i, r, n),
                        n.reverseButtons &&
                            (n.toast
                                ? (t.insertBefore(r, o), t.insertBefore(i, o))
                                : (t.insertBefore(r, e),
                                  t.insertBefore(i, e),
                                  t.insertBefore(o, e)));
                })(n, o, e),
                et(o, e.loaderHtml || ""),
                ot(o, e, "loader"));
        };
    function St(t, e, n) {
        var o = P(e);
        ht(t, n["show".concat(o, "Button")], "inline-block"),
            et(t, n["".concat(e, "ButtonText")] || ""),
            t.setAttribute(
                "aria-label",
                n["".concat(e, "ButtonAriaLabel")] || ""
            ),
            (t.className = A[e]),
            ot(t, n, "".concat(e, "Button"));
    }
    var Ot = function (t, e) {
        var n = I();
        n &&
            (!(function (t, e) {
                "string" == typeof e
                    ? (t.style.background = e)
                    : e ||
                      ct(
                          [document.documentElement, document.body],
                          A["no-backdrop"]
                      );
            })(n, e.backdrop),
            (function (t, e) {
                if (!e) return;
                e in A
                    ? ct(t, A[e])
                    : (B(
                          'The "position" parameter is not valid, defaulting to "center"'
                      ),
                      ct(t, A.center));
            })(n, e.position),
            (function (t, e) {
                if (!e) return;
                ct(t, A["grow-".concat(e)]);
            })(n, e.grow),
            ot(n, e, "container"));
    };
    var Lt = { innerParams: new WeakMap(), domCache: new WeakMap() },
        jt = [
            "input",
            "file",
            "range",
            "select",
            "radio",
            "checkbox",
            "textarea",
        ],
        Mt = function (t) {
            if (t.input)
                if (_t[t.input]) {
                    var e = Vt(t.input),
                        n = _t[t.input](e, t);
                    dt(e),
                        t.inputAutoFocus &&
                            setTimeout(function () {
                                rt(n);
                            });
                } else
                    T(
                        "Unexpected type of input! Expected "
                            .concat(Object.keys(_t).join(" | "), ', got "')
                            .concat(t.input, '"')
                    );
        },
        It = function (t, e) {
            var n = it(q(), t);
            if (n)
                for (var o in ((function (t) {
                    for (var e = 0; e < t.attributes.length; e++) {
                        var n = t.attributes[e].name;
                        ["id", "type", "value", "style"].includes(n) ||
                            t.removeAttribute(n);
                    }
                })(n),
                e))
                    n.setAttribute(o, e[o]);
        },
        Ht = function (t) {
            var n = Vt(t.input);
            "object" === e(t.customClass) && ct(n, t.customClass.input);
        },
        Dt = function (t, e) {
            (t.placeholder && !e.inputPlaceholder) ||
                (t.placeholder = e.inputPlaceholder);
        },
        qt = function (t, n, o) {
            if (o.inputLabel) {
                var i = document.createElement("label"),
                    r = A["input-label"];
                i.setAttribute("for", t.id),
                    (i.className = r),
                    "object" === e(o.customClass) &&
                        ct(i, o.customClass.inputLabel),
                    (i.innerText = o.inputLabel),
                    n.insertAdjacentElement("beforebegin", i);
            }
        },
        Vt = function (t) {
            return st(q(), A[t] || A.input);
        },
        Rt = function (t, n) {
            ["string", "number"].includes(e(n))
                ? (t.value = "".concat(n))
                : M(n) ||
                  B(
                      'Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(
                          e(n),
                          '"'
                      )
                  );
        },
        _t = {};
    (_t.text =
        _t.email =
        _t.password =
        _t.number =
        _t.tel =
        _t.url =
        _t.search =
        _t.date =
        _t["datetime-local"] =
        _t.time =
        _t.week =
        _t.month =
            function (t, e) {
                return (
                    Rt(t, e.inputValue),
                    qt(t, t, e),
                    Dt(t, e),
                    (t.type = e.input),
                    t
                );
            }),
        (_t.file = function (t, e) {
            return qt(t, t, e), Dt(t, e), t;
        }),
        (_t.range = function (t, e) {
            var n = t.querySelector("input"),
                o = t.querySelector("output");
            return (
                Rt(n, e.inputValue),
                (n.type = e.input),
                Rt(o, e.inputValue),
                qt(n, t, e),
                t
            );
        }),
        (_t.select = function (t, e) {
            if (((t.textContent = ""), e.inputPlaceholder)) {
                var n = document.createElement("option");
                et(n, e.inputPlaceholder),
                    (n.value = ""),
                    (n.disabled = !0),
                    (n.selected = !0),
                    t.appendChild(n);
            }
            return qt(t, t, e), t;
        }),
        (_t.radio = function (t) {
            return (t.textContent = ""), t;
        }),
        (_t.checkbox = function (t, e) {
            var n = it(q(), "checkbox");
            (n.value = "1"), (n.checked = Boolean(e.inputValue));
            var o = t.querySelector("span");
            return et(o, e.inputPlaceholder), n;
        }),
        (_t.textarea = function (t, e) {
            Rt(t, e.inputValue), Dt(t, e), qt(t, t, e);
            return (
                setTimeout(function () {
                    if ("MutationObserver" in window) {
                        var n = parseInt(window.getComputedStyle(q()).width);
                        new MutationObserver(function () {
                            if (document.body.contains(t)) {
                                var o,
                                    i =
                                        t.offsetWidth +
                                        ((o = t),
                                        parseInt(
                                            window.getComputedStyle(o)
                                                .marginLeft
                                        ) +
                                            parseInt(
                                                window.getComputedStyle(o)
                                                    .marginRight
                                            ));
                                i > n
                                    ? (q().style.width = "".concat(i, "px"))
                                    : lt(q(), "width", e.width);
                            }
                        }).observe(t, {
                            attributes: !0,
                            attributeFilter: ["style"],
                        });
                    }
                }),
                t
            );
        });
    var Nt = function (t, e) {
            var n = _();
            n &&
                (pt(n),
                ot(n, e, "htmlContainer"),
                e.html
                    ? (Et(e.html, n), dt(n, "block"))
                    : e.text
                    ? ((n.textContent = e.text), dt(n, "block"))
                    : ft(n),
                (function (t, e) {
                    var n = q();
                    if (n) {
                        var o = Lt.innerParams.get(t),
                            i = !o || e.input !== o.input;
                        jt.forEach(function (t) {
                            var o = st(n, A[t]);
                            o &&
                                (It(t, e.inputAttributes),
                                (o.className = A[t]),
                                i && ft(o));
                        }),
                            e.input && (i && Mt(e), Ht(e));
                    }
                })(t, e));
        },
        Ft = function (t, e) {
            for (var n = 0, o = Object.entries(k); n < o.length; n++) {
                var i = d(o[n], 2),
                    r = i[0],
                    a = i[1];
                e.icon !== r && ut(t, a);
            }
            ct(t, e.icon && k[e.icon]), Wt(t, e), Ut(), ot(t, e, "icon");
        },
        Ut = function () {
            var t = q();
            if (t)
                for (
                    var e = window
                            .getComputedStyle(t)
                            .getPropertyValue("background-color"),
                        n = t.querySelectorAll(
                            "[class^=swal2-success-circular-line], .swal2-success-fix"
                        ),
                        o = 0;
                    o < n.length;
                    o++
                )
                    n[o].style.backgroundColor = e;
        },
        zt = function (t, e) {
            if (e.icon || e.iconHtml) {
                var n = t.innerHTML,
                    o = "";
                if (e.iconHtml) o = Kt(e.iconHtml);
                else if ("success" === e.icon)
                    (o =
                        '\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n'),
                        (n = n.replace(/ style=".*?"/g, ""));
                else if ("error" === e.icon)
                    o =
                        '\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n';
                else if (e.icon) {
                    o = Kt({ question: "?", warning: "!", info: "i" }[e.icon]);
                }
                n.trim() !== o.trim() && et(t, o);
            }
        },
        Wt = function (t, e) {
            if (e.iconColor) {
                (t.style.color = e.iconColor),
                    (t.style.borderColor = e.iconColor);
                for (
                    var n = 0,
                        o = [
                            ".swal2-success-line-tip",
                            ".swal2-success-line-long",
                            ".swal2-x-mark-line-left",
                            ".swal2-x-mark-line-right",
                        ];
                    n < o.length;
                    n++
                ) {
                    mt(t, o[n], "backgroundColor", e.iconColor);
                }
                mt(t, ".swal2-success-ring", "borderColor", e.iconColor);
            }
        },
        Kt = function (t) {
            return '<div class="'
                .concat(A["icon-content"], '">')
                .concat(t, "</div>");
        },
        Yt = function (t, e) {
            var n = e.showClass || {};
            (t.className = ""
                .concat(A.popup, " ")
                .concat(vt(t) ? n.popup : "")),
                e.toast
                    ? (ct(
                          [document.documentElement, document.body],
                          A["toast-shown"]
                      ),
                      ct(t, A.toast))
                    : ct(t, A.modal),
                ot(t, e, "popup"),
                "string" == typeof e.customClass && ct(t, e.customClass),
                e.icon && ct(t, A["icon-".concat(e.icon)]);
        },
        Zt = function (t) {
            var e = document.createElement("li");
            return ct(e, A["progress-step"]), et(e, t), e;
        },
        $t = function (t) {
            var e = document.createElement("li");
            return (
                ct(e, A["progress-step-line"]),
                t.progressStepsDistance &&
                    lt(e, "width", t.progressStepsDistance),
                e
            );
        },
        Jt = function (t, e) {
            !(function (t, e) {
                var n = I(),
                    o = q();
                if (n && o) {
                    if (e.toast) {
                        lt(n, "width", e.width), (o.style.width = "100%");
                        var i = Y();
                        i && o.insertBefore(i, V());
                    } else lt(o, "width", e.width);
                    lt(o, "padding", e.padding),
                        e.color && (o.style.color = e.color),
                        e.background && (o.style.background = e.background),
                        ft(U()),
                        Yt(o, e);
                }
            })(0, e),
                Ot(0, e),
                (function (t, e) {
                    var n = F();
                    if (n) {
                        var o = e.progressSteps,
                            i = e.currentProgressStep;
                        o && 0 !== o.length && void 0 !== i
                            ? (dt(n),
                              (n.textContent = ""),
                              i >= o.length &&
                                  B(
                                      "Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"
                                  ),
                              o.forEach(function (t, r) {
                                  var a = Zt(t);
                                  if (
                                      (n.appendChild(a),
                                      r === i &&
                                          ct(a, A["active-progress-step"]),
                                      r !== o.length - 1)
                                  ) {
                                      var c = $t(e);
                                      n.appendChild(c);
                                  }
                              }))
                            : ft(n);
                    }
                })(0, e),
                (function (t, e) {
                    var n = Lt.innerParams.get(t),
                        o = V();
                    if (o) {
                        if (n && e.icon === n.icon)
                            return zt(o, e), void Ft(o, e);
                        if (e.icon || e.iconHtml) {
                            if (e.icon && -1 === Object.keys(k).indexOf(e.icon))
                                return (
                                    T(
                                        'Unknown icon! Expected "success", "error", "warning", "info" or "question", got "'.concat(
                                            e.icon,
                                            '"'
                                        )
                                    ),
                                    void ft(o)
                                );
                            dt(o),
                                zt(o, e),
                                Ft(o, e),
                                ct(o, e.showClass && e.showClass.icon);
                        } else ft(o);
                    }
                })(t, e),
                (function (t, e) {
                    var n = N();
                    n &&
                        (e.imageUrl
                            ? (dt(n, ""),
                              n.setAttribute("src", e.imageUrl),
                              n.setAttribute("alt", e.imageAlt || ""),
                              lt(n, "width", e.imageWidth),
                              lt(n, "height", e.imageHeight),
                              (n.className = A.image),
                              ot(n, e, "image"))
                            : ft(n));
                })(0, e),
                (function (t, e) {
                    var n = R();
                    n &&
                        (pt(n),
                        ht(n, e.title || e.titleText, "block"),
                        e.title && Et(e.title, n),
                        e.titleText && (n.innerText = e.titleText),
                        ot(n, e, "title"));
                })(0, e),
                (function (t, e) {
                    var n = X();
                    n &&
                        (et(n, e.closeButtonHtml || ""),
                        ot(n, e, "closeButton"),
                        ht(n, e.showCloseButton),
                        n.setAttribute(
                            "aria-label",
                            e.closeButtonAriaLabel || ""
                        ));
                })(0, e),
                Nt(t, e),
                xt(0, e),
                (function (t, e) {
                    var n = $();
                    n &&
                        (pt(n),
                        ht(n, e.footer, "block"),
                        e.footer && Et(e.footer, n),
                        ot(n, e, "footer"));
                })(0, e);
            var n = q();
            "function" == typeof e.didRender && n && e.didRender(n);
        },
        Xt = function () {
            var t;
            return null === (t = z()) || void 0 === t ? void 0 : t.click();
        },
        Gt = Object.freeze({
            cancel: "cancel",
            backdrop: "backdrop",
            close: "close",
            esc: "esc",
            timer: "timer",
        }),
        Qt = function (t) {
            t.keydownTarget &&
                t.keydownHandlerAdded &&
                (t.keydownTarget.removeEventListener(
                    "keydown",
                    t.keydownHandler,
                    { capture: t.keydownListenerCapture }
                ),
                (t.keydownHandlerAdded = !1));
        },
        te = function (t, e) {
            var n,
                o = G();
            if (o.length)
                return (
                    (t += e) === o.length
                        ? (t = 0)
                        : -1 === t && (t = o.length - 1),
                    void o[t].focus()
                );
            null === (n = q()) || void 0 === n || n.focus();
        },
        ee = ["ArrowRight", "ArrowDown"],
        ne = ["ArrowLeft", "ArrowUp"],
        oe = function (t, e, n) {
            t &&
                (e.isComposing ||
                    229 === e.keyCode ||
                    (t.stopKeydownPropagation && e.stopPropagation(),
                    "Enter" === e.key
                        ? ie(e, t)
                        : "Tab" === e.key
                        ? re(e)
                        : [].concat(ee, ne).includes(e.key)
                        ? ae(e.key)
                        : "Escape" === e.key && ce(e, t, n)));
        },
        ie = function (t, e) {
            if (O(e.allowEnterKey)) {
                var n = it(q(), e.input);
                if (
                    t.target &&
                    n &&
                    t.target instanceof HTMLElement &&
                    t.target.outerHTML === n.outerHTML
                ) {
                    if (["textarea", "file"].includes(e.input)) return;
                    Xt(), t.preventDefault();
                }
            }
        },
        re = function (t) {
            for (var e = t.target, n = G(), o = -1, i = 0; i < n.length; i++)
                if (e === n[i]) {
                    o = i;
                    break;
                }
            t.shiftKey ? te(o, -1) : te(o, 1),
                t.stopPropagation(),
                t.preventDefault();
        },
        ae = function (t) {
            var e = Z(),
                n = z(),
                o = K(),
                i = W();
            if (e && n && o && i) {
                var r = [n, o, i];
                if (
                    !(document.activeElement instanceof HTMLElement) ||
                    r.includes(document.activeElement)
                ) {
                    var a = ee.includes(t)
                            ? "nextElementSibling"
                            : "previousElementSibling",
                        c = document.activeElement;
                    if (c) {
                        for (var u = 0; u < e.children.length; u++) {
                            if (!(c = c[a])) return;
                            if (c instanceof HTMLButtonElement && vt(c)) break;
                        }
                        c instanceof HTMLButtonElement && c.focus();
                    }
                }
            }
        },
        ce = function (t, e, n) {
            O(e.allowEscapeKey) && (t.preventDefault(), n(Gt.esc));
        },
        ue = {
            swalPromiseResolve: new WeakMap(),
            swalPromiseReject: new WeakMap(),
        },
        se = function () {
            Array.from(document.body.children).forEach(function (t) {
                t.hasAttribute("data-previous-aria-hidden")
                    ? (t.setAttribute(
                          "aria-hidden",
                          t.getAttribute("data-previous-aria-hidden") || ""
                      ),
                      t.removeAttribute("data-previous-aria-hidden"))
                    : t.removeAttribute("aria-hidden");
            });
        },
        le = "undefined" != typeof window && !!window.GestureEvent,
        de = function () {
            var t,
                e = I();
            e &&
                ((e.ontouchstart = function (e) {
                    t = fe(e);
                }),
                (e.ontouchmove = function (e) {
                    t && (e.preventDefault(), e.stopPropagation());
                }));
        },
        fe = function (t) {
            var e = t.target,
                n = I(),
                o = _();
            return (
                !(!n || !o) &&
                !pe(t) &&
                !me(t) &&
                (e === n ||
                    (!gt(n) &&
                        e instanceof HTMLElement &&
                        "INPUT" !== e.tagName &&
                        "TEXTAREA" !== e.tagName &&
                        (!gt(o) || !o.contains(e))))
            );
        },
        pe = function (t) {
            return (
                t.touches &&
                t.touches.length &&
                "stylus" === t.touches[0].touchType
            );
        },
        me = function (t) {
            return t.touches && t.touches.length > 1;
        },
        he = null,
        ve = function (t) {
            null === he &&
                (document.body.scrollHeight > window.innerHeight ||
                    "scroll" === t) &&
                ((he = parseInt(
                    window
                        .getComputedStyle(document.body)
                        .getPropertyValue("padding-right")
                )),
                (document.body.style.paddingRight = "".concat(
                    he +
                        (function () {
                            var t = document.createElement("div");
                            (t.className = A["scrollbar-measure"]),
                                document.body.appendChild(t);
                            var e =
                                t.getBoundingClientRect().width - t.clientWidth;
                            return document.body.removeChild(t), e;
                        })(),
                    "px"
                )));
        };
    function ge(t, e, n, o) {
        tt()
            ? Pe(t, o)
            : (w(n).then(function () {
                  return Pe(t, o);
              }),
              Qt(y)),
            le
                ? (e.setAttribute("style", "display:none !important"),
                  e.removeAttribute("class"),
                  (e.innerHTML = ""))
                : e.remove(),
            Q() &&
                (null !== he &&
                    ((document.body.style.paddingRight = "".concat(he, "px")),
                    (he = null)),
                (function () {
                    if (nt(document.body, A.iosfix)) {
                        var t = parseInt(document.body.style.top, 10);
                        ut(document.body, A.iosfix),
                            (document.body.style.top = ""),
                            (document.body.scrollTop = -1 * t);
                    }
                })(),
                se()),
            ut(
                [document.documentElement, document.body],
                [A.shown, A["height-auto"], A["no-backdrop"], A["toast-shown"]]
            );
    }
    function be(t) {
        t = Ae(t);
        var e = ue.swalPromiseResolve.get(this),
            n = ye(this);
        this.isAwaitingPromise ? t.isDismissed || (Ce(this), e(t)) : n && e(t);
    }
    var ye = function (t) {
        var e = q();
        if (!e) return !1;
        var n = Lt.innerParams.get(t);
        if (!n || nt(e, n.hideClass.popup)) return !1;
        ut(e, n.showClass.popup), ct(e, n.hideClass.popup);
        var o = I();
        return (
            ut(o, n.showClass.backdrop),
            ct(o, n.hideClass.backdrop),
            ke(t, e, n),
            !0
        );
    };
    function we(t) {
        var e = ue.swalPromiseReject.get(this);
        Ce(this), e && e(t);
    }
    var Ce = function (t) {
            t.isAwaitingPromise &&
                (delete t.isAwaitingPromise,
                Lt.innerParams.get(t) || t._destroy());
        },
        Ae = function (t) {
            return void 0 === t
                ? { isConfirmed: !1, isDenied: !1, isDismissed: !0 }
                : Object.assign(
                      { isConfirmed: !1, isDenied: !1, isDismissed: !1 },
                      t
                  );
        },
        ke = function (t, e, n) {
            var o = I(),
                i = Tt && bt(e);
            "function" == typeof n.willClose && n.willClose(e),
                i
                    ? Ee(t, e, o, n.returnFocus, n.didClose)
                    : ge(t, o, n.returnFocus, n.didClose);
        },
        Ee = function (t, e, n, o, i) {
            Tt &&
                ((y.swalCloseEventFinishedCallback = ge.bind(null, t, n, o, i)),
                e.addEventListener(Tt, function (t) {
                    t.target === e &&
                        (y.swalCloseEventFinishedCallback(),
                        delete y.swalCloseEventFinishedCallback);
                }));
        },
        Pe = function (t, e) {
            setTimeout(function () {
                "function" == typeof e && e.bind(t.params)(),
                    t._destroy && t._destroy();
            });
        },
        Be = function (t) {
            var e = q();
            if ((e || new ao(), (e = q()))) {
                var n = Y();
                tt() ? ft(V()) : Te(e, t),
                    dt(n),
                    e.setAttribute("data-loading", "true"),
                    e.setAttribute("aria-busy", "true"),
                    e.focus();
            }
        },
        Te = function (t, e) {
            var n = Z(),
                o = Y();
            n &&
                o &&
                (!e && vt(z()) && (e = z()),
                dt(n),
                e &&
                    (ft(e),
                    o.setAttribute("data-button-to-replace", e.className),
                    n.insertBefore(o, e)),
                ct([t, n], A.loading));
        },
        xe = function (t) {
            return t.checked ? 1 : 0;
        },
        Se = function (t) {
            return t.checked ? t.value : null;
        },
        Oe = function (t) {
            return t.files && t.files.length
                ? null !== t.getAttribute("multiple")
                    ? t.files
                    : t.files[0]
                : null;
        },
        Le = function (t, n) {
            var o = q();
            if (o) {
                var i = function (t) {
                    "select" === n.input
                        ? (function (t, e, n) {
                              var o = st(t, A.select);
                              if (!o) return;
                              var i = function (t, e, o) {
                                  var i = document.createElement("option");
                                  (i.value = o),
                                      et(i, e),
                                      (i.selected = Ie(o, n.inputValue)),
                                      t.appendChild(i);
                              };
                              e.forEach(function (t) {
                                  var e = t[0],
                                      n = t[1];
                                  if (Array.isArray(n)) {
                                      var r =
                                          document.createElement("optgroup");
                                      (r.label = e),
                                          (r.disabled = !1),
                                          o.appendChild(r),
                                          n.forEach(function (t) {
                                              return i(r, t[1], t[0]);
                                          });
                                  } else i(o, n, e);
                              }),
                                  o.focus();
                          })(o, Me(t), n)
                        : "radio" === n.input &&
                          (function (t, e, n) {
                              var o = st(t, A.radio);
                              if (!o) return;
                              e.forEach(function (t) {
                                  var e = t[0],
                                      i = t[1],
                                      r = document.createElement("input"),
                                      a = document.createElement("label");
                                  (r.type = "radio"),
                                      (r.name = A.radio),
                                      (r.value = e),
                                      Ie(e, n.inputValue) && (r.checked = !0);
                                  var c = document.createElement("span");
                                  et(c, i),
                                      (c.className = A.label),
                                      a.appendChild(r),
                                      a.appendChild(c),
                                      o.appendChild(a);
                              });
                              var i = o.querySelectorAll("input");
                              i.length && i[0].focus();
                          })(o, Me(t), n);
                };
                L(n.inputOptions) || M(n.inputOptions)
                    ? (Be(z()),
                      j(n.inputOptions).then(function (e) {
                          t.hideLoading(), i(e);
                      }))
                    : "object" === e(n.inputOptions)
                    ? i(n.inputOptions)
                    : T(
                          "Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(
                              e(n.inputOptions)
                          )
                      );
            }
        },
        je = function (t, e) {
            var n = t.getInput();
            n &&
                (ft(n),
                j(e.inputValue)
                    .then(function (o) {
                        (n.value =
                            "number" === e.input
                                ? "".concat(parseFloat(o) || 0)
                                : "".concat(o)),
                            dt(n),
                            n.focus(),
                            t.hideLoading();
                    })
                    .catch(function (e) {
                        T("Error in inputValue promise: ".concat(e)),
                            (n.value = ""),
                            dt(n),
                            n.focus(),
                            t.hideLoading();
                    }));
        };
    var Me = function t(n) {
            var o = [];
            return (
                n instanceof Map
                    ? n.forEach(function (n, i) {
                          var r = n;
                          "object" === e(r) && (r = t(r)), o.push([i, r]);
                      })
                    : Object.keys(n).forEach(function (i) {
                          var r = n[i];
                          "object" === e(r) && (r = t(r)), o.push([i, r]);
                      }),
                o
            );
        },
        Ie = function (t, e) {
            return !!e && e.toString() === t.toString();
        },
        He = void 0,
        De = function (t, e) {
            var n = Lt.innerParams.get(t);
            if (n.input) {
                var o = t.getInput(),
                    i = (function (t, e) {
                        var n = t.getInput();
                        if (!n) return null;
                        switch (e.input) {
                            case "checkbox":
                                return xe(n);
                            case "radio":
                                return Se(n);
                            case "file":
                                return Oe(n);
                            default:
                                return e.inputAutoTrim
                                    ? n.value.trim()
                                    : n.value;
                        }
                    })(t, n);
                n.inputValidator
                    ? qe(t, i, e)
                    : o && !o.checkValidity()
                    ? (t.enableButtons(),
                      t.showValidationMessage(n.validationMessage))
                    : "deny" === e
                    ? Ve(t, i)
                    : Ne(t, i);
            } else
                T(
                    'The "input" parameter is needed to be set when using returnInputValueOn'.concat(
                        P(e)
                    )
                );
        },
        qe = function (t, e, n) {
            var o = Lt.innerParams.get(t);
            t.disableInput(),
                Promise.resolve()
                    .then(function () {
                        return j(o.inputValidator(e, o.validationMessage));
                    })
                    .then(function (o) {
                        t.enableButtons(),
                            t.enableInput(),
                            o
                                ? t.showValidationMessage(o)
                                : "deny" === n
                                ? Ve(t, e)
                                : Ne(t, e);
                    });
        },
        Ve = function (t, e) {
            var n = Lt.innerParams.get(t || He);
            (n.showLoaderOnDeny && Be(K()), n.preDeny)
                ? ((t.isAwaitingPromise = !0),
                  Promise.resolve()
                      .then(function () {
                          return j(n.preDeny(e, n.validationMessage));
                      })
                      .then(function (n) {
                          !1 === n
                              ? (t.hideLoading(), Ce(t))
                              : t.close({
                                    isDenied: !0,
                                    value: void 0 === n ? e : n,
                                });
                      })
                      .catch(function (e) {
                          return _e(t || He, e);
                      }))
                : t.close({ isDenied: !0, value: e });
        },
        Re = function (t, e) {
            t.close({ isConfirmed: !0, value: e });
        },
        _e = function (t, e) {
            t.rejectPromise(e);
        },
        Ne = function (t, e) {
            var n = Lt.innerParams.get(t || He);
            (n.showLoaderOnConfirm && Be(), n.preConfirm)
                ? (t.resetValidationMessage(),
                  (t.isAwaitingPromise = !0),
                  Promise.resolve()
                      .then(function () {
                          return j(n.preConfirm(e, n.validationMessage));
                      })
                      .then(function (n) {
                          vt(U()) || !1 === n
                              ? (t.hideLoading(), Ce(t))
                              : Re(t, void 0 === n ? e : n);
                      })
                      .catch(function (e) {
                          return _e(t || He, e);
                      }))
                : Re(t, e);
        };
    function Fe() {
        var t = Lt.innerParams.get(this);
        if (t) {
            var e = Lt.domCache.get(this);
            ft(e.loader),
                tt() ? t.icon && dt(V()) : Ue(e),
                ut([e.popup, e.actions], A.loading),
                e.popup.removeAttribute("aria-busy"),
                e.popup.removeAttribute("data-loading"),
                (e.confirmButton.disabled = !1),
                (e.denyButton.disabled = !1),
                (e.cancelButton.disabled = !1);
        }
    }
    var Ue = function (t) {
        var e = t.popup.getElementsByClassName(
            t.loader.getAttribute("data-button-to-replace")
        );
        e.length
            ? dt(e[0], "inline-block")
            : vt(z()) || vt(K()) || vt(W()) || ft(t.actions);
    };
    function ze() {
        var t = Lt.innerParams.get(this),
            e = Lt.domCache.get(this);
        return e ? it(e.popup, t.input) : null;
    }
    function We(t, e, n) {
        var o = Lt.domCache.get(t);
        e.forEach(function (t) {
            o[t].disabled = n;
        });
    }
    function Ke(t, e) {
        var n = q();
        if (n && t)
            if ("radio" === t.type)
                for (
                    var o = n.querySelectorAll('[name="'.concat(A.radio, '"]')),
                        i = 0;
                    i < o.length;
                    i++
                )
                    o[i].disabled = e;
            else t.disabled = e;
    }
    function Ye() {
        We(this, ["confirmButton", "denyButton", "cancelButton"], !1);
    }
    function Ze() {
        We(this, ["confirmButton", "denyButton", "cancelButton"], !0);
    }
    function $e() {
        Ke(this.getInput(), !1);
    }
    function Je() {
        Ke(this.getInput(), !0);
    }
    function Xe(t) {
        var e = Lt.domCache.get(this),
            n = Lt.innerParams.get(this);
        et(e.validationMessage, t),
            (e.validationMessage.className = A["validation-message"]),
            n.customClass &&
                n.customClass.validationMessage &&
                ct(e.validationMessage, n.customClass.validationMessage),
            dt(e.validationMessage);
        var o = this.getInput();
        o &&
            (o.setAttribute("aria-invalid", "true"),
            o.setAttribute("aria-describedby", A["validation-message"]),
            rt(o),
            ct(o, A.inputerror));
    }
    function Ge() {
        var t = Lt.domCache.get(this);
        t.validationMessage && ft(t.validationMessage);
        var e = this.getInput();
        e &&
            (e.removeAttribute("aria-invalid"),
            e.removeAttribute("aria-describedby"),
            ut(e, A.inputerror));
    }
    var Qe = {
            title: "",
            titleText: "",
            text: "",
            html: "",
            footer: "",
            icon: void 0,
            iconColor: void 0,
            iconHtml: void 0,
            template: void 0,
            toast: !1,
            animation: !0,
            showClass: {
                popup: "swal2-show",
                backdrop: "swal2-backdrop-show",
                icon: "swal2-icon-show",
            },
            hideClass: {
                popup: "swal2-hide",
                backdrop: "swal2-backdrop-hide",
                icon: "swal2-icon-hide",
            },
            customClass: {},
            target: "body",
            color: void 0,
            backdrop: !0,
            heightAuto: !0,
            allowOutsideClick: !0,
            allowEscapeKey: !0,
            allowEnterKey: !0,
            stopKeydownPropagation: !0,
            keydownListenerCapture: !1,
            showConfirmButton: !0,
            showDenyButton: !1,
            showCancelButton: !1,
            preConfirm: void 0,
            preDeny: void 0,
            confirmButtonText: "OK",
            confirmButtonAriaLabel: "",
            confirmButtonColor: void 0,
            denyButtonText: "No",
            denyButtonAriaLabel: "",
            denyButtonColor: void 0,
            cancelButtonText: "Cancel",
            cancelButtonAriaLabel: "",
            cancelButtonColor: void 0,
            buttonsStyling: !0,
            reverseButtons: !1,
            focusConfirm: !0,
            focusDeny: !1,
            focusCancel: !1,
            returnFocus: !0,
            showCloseButton: !1,
            closeButtonHtml: "&times;",
            closeButtonAriaLabel: "Close this dialog",
            loaderHtml: "",
            showLoaderOnConfirm: !1,
            showLoaderOnDeny: !1,
            imageUrl: void 0,
            imageWidth: void 0,
            imageHeight: void 0,
            imageAlt: "",
            timer: void 0,
            timerProgressBar: !1,
            width: void 0,
            padding: void 0,
            background: void 0,
            input: void 0,
            inputPlaceholder: "",
            inputLabel: "",
            inputValue: "",
            inputOptions: {},
            inputAutoFocus: !0,
            inputAutoTrim: !0,
            inputAttributes: {},
            inputValidator: void 0,
            returnInputValueOnDeny: !1,
            validationMessage: void 0,
            grow: !1,
            position: "center",
            progressSteps: [],
            currentProgressStep: void 0,
            progressStepsDistance: void 0,
            willOpen: void 0,
            didOpen: void 0,
            didRender: void 0,
            willClose: void 0,
            didClose: void 0,
            didDestroy: void 0,
            scrollbarPadding: !0,
        },
        tn = [
            "allowEscapeKey",
            "allowOutsideClick",
            "background",
            "buttonsStyling",
            "cancelButtonAriaLabel",
            "cancelButtonColor",
            "cancelButtonText",
            "closeButtonAriaLabel",
            "closeButtonHtml",
            "color",
            "confirmButtonAriaLabel",
            "confirmButtonColor",
            "confirmButtonText",
            "currentProgressStep",
            "customClass",
            "denyButtonAriaLabel",
            "denyButtonColor",
            "denyButtonText",
            "didClose",
            "didDestroy",
            "footer",
            "hideClass",
            "html",
            "icon",
            "iconColor",
            "iconHtml",
            "imageAlt",
            "imageHeight",
            "imageUrl",
            "imageWidth",
            "preConfirm",
            "preDeny",
            "progressSteps",
            "returnFocus",
            "reverseButtons",
            "showCancelButton",
            "showCloseButton",
            "showConfirmButton",
            "showDenyButton",
            "text",
            "title",
            "titleText",
            "willClose",
        ],
        en = {},
        nn = [
            "allowOutsideClick",
            "allowEnterKey",
            "backdrop",
            "focusConfirm",
            "focusDeny",
            "focusCancel",
            "returnFocus",
            "heightAuto",
            "keydownListenerCapture",
        ],
        on = function (t) {
            return Object.prototype.hasOwnProperty.call(Qe, t);
        },
        rn = function (t) {
            return -1 !== tn.indexOf(t);
        },
        an = function (t) {
            return en[t];
        },
        cn = function (t) {
            on(t) || B('Unknown parameter "'.concat(t, '"'));
        },
        un = function (t) {
            nn.includes(t) &&
                B('The parameter "'.concat(t, '" is incompatible with toasts'));
        },
        sn = function (t) {
            var e = an(t);
            e && S(t, e);
        };
    function ln(t) {
        var e = q(),
            n = Lt.innerParams.get(this);
        if (e && !nt(e, n.hideClass.popup)) {
            var o = dn(t),
                i = Object.assign({}, n, o);
            Jt(this, i),
                Lt.innerParams.set(this, i),
                Object.defineProperties(this, {
                    params: {
                        value: Object.assign({}, this.params, t),
                        writable: !1,
                        enumerable: !0,
                    },
                });
        } else B("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
    }
    var dn = function (t) {
        var e = {};
        return (
            Object.keys(t).forEach(function (n) {
                rn(n)
                    ? (e[n] = t[n])
                    : B("Invalid parameter to update: ".concat(n));
            }),
            e
        );
    };
    function fn() {
        var t = Lt.domCache.get(this),
            e = Lt.innerParams.get(this);
        e
            ? (t.popup &&
                  y.swalCloseEventFinishedCallback &&
                  (y.swalCloseEventFinishedCallback(),
                  delete y.swalCloseEventFinishedCallback),
              "function" == typeof e.didDestroy && e.didDestroy(),
              pn(this))
            : mn(this);
    }
    var pn = function (t) {
            mn(t),
                delete t.params,
                delete y.keydownHandler,
                delete y.keydownTarget,
                delete y.currentInstance;
        },
        mn = function (t) {
            t.isAwaitingPromise
                ? (hn(Lt, t), (t.isAwaitingPromise = !0))
                : (hn(ue, t),
                  hn(Lt, t),
                  delete t.isAwaitingPromise,
                  delete t.disableButtons,
                  delete t.enableButtons,
                  delete t.getInput,
                  delete t.disableInput,
                  delete t.enableInput,
                  delete t.hideLoading,
                  delete t.disableLoading,
                  delete t.showValidationMessage,
                  delete t.resetValidationMessage,
                  delete t.close,
                  delete t.closePopup,
                  delete t.closeModal,
                  delete t.closeToast,
                  delete t.rejectPromise,
                  delete t.update,
                  delete t._destroy);
        },
        hn = function (t, e) {
            for (var n in t) t[n].delete(e);
        },
        vn = Object.freeze({
            __proto__: null,
            _destroy: fn,
            close: be,
            closeModal: be,
            closePopup: be,
            closeToast: be,
            disableButtons: Ze,
            disableInput: Je,
            disableLoading: Fe,
            enableButtons: Ye,
            enableInput: $e,
            getInput: ze,
            handleAwaitingPromise: Ce,
            hideLoading: Fe,
            rejectPromise: we,
            resetValidationMessage: Ge,
            showValidationMessage: Xe,
            update: ln,
        }),
        gn = function (t, e, n) {
            e.popup.onclick = function () {
                (t && (bn(t) || t.timer || t.input)) || n(Gt.close);
            };
        },
        bn = function (t) {
            return !!(
                t.showConfirmButton ||
                t.showDenyButton ||
                t.showCancelButton ||
                t.showCloseButton
            );
        },
        yn = !1,
        wn = function (t) {
            t.popup.onmousedown = function () {
                t.container.onmouseup = function (e) {
                    (t.container.onmouseup = function () {}),
                        e.target === t.container && (yn = !0);
                };
            };
        },
        Cn = function (t) {
            t.container.onmousedown = function () {
                t.popup.onmouseup = function (e) {
                    (t.popup.onmouseup = function () {}),
                        (e.target === t.popup ||
                            (e.target instanceof HTMLElement &&
                                t.popup.contains(e.target))) &&
                            (yn = !0);
                };
            };
        },
        An = function (t, e, n) {
            e.container.onclick = function (o) {
                yn
                    ? (yn = !1)
                    : o.target === e.container &&
                      O(t.allowOutsideClick) &&
                      n(Gt.backdrop);
            };
        },
        kn = function (t) {
            return (
                t instanceof Element ||
                (function (t) {
                    return "object" === e(t) && t.jquery;
                })(t)
            );
        };
    var En = function () {
            if (y.timeout)
                return (
                    (function () {
                        var t = J();
                        if (t) {
                            var e = parseInt(window.getComputedStyle(t).width);
                            t.style.removeProperty("transition"),
                                (t.style.width = "100%");
                            var n =
                                (e /
                                    parseInt(
                                        window.getComputedStyle(t).width
                                    )) *
                                100;
                            t.style.width = "".concat(n, "%");
                        }
                    })(),
                    y.timeout.stop()
                );
        },
        Pn = function () {
            if (y.timeout) {
                var t = y.timeout.start();
                return yt(t), t;
            }
        },
        Bn = !1,
        Tn = {};
    var xn,
        Sn = function (t) {
            for (var e = t.target; e && e !== document; e = e.parentNode)
                for (var n in Tn) {
                    var o = e.getAttribute(n);
                    if (o) return void Tn[n].fire({ template: o });
                }
        },
        On = Object.freeze({
            __proto__: null,
            argsToParams: function (t) {
                var n = {};
                return (
                    "object" !== e(t[0]) || kn(t[0])
                        ? ["title", "html", "icon"].forEach(function (o, i) {
                              var r = t[i];
                              "string" == typeof r || kn(r)
                                  ? (n[o] = r)
                                  : void 0 !== r &&
                                    T(
                                        "Unexpected type of "
                                            .concat(
                                                o,
                                                '! Expected "string" or "Element", got '
                                            )
                                            .concat(e(r))
                                    );
                          })
                        : Object.assign(n, t[0]),
                    n
                );
            },
            bindClickHandler: function () {
                (Tn[
                    arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : "data-swal-template"
                ] = this),
                    Bn ||
                        (document.body.addEventListener("click", Sn),
                        (Bn = !0));
            },
            clickCancel: function () {
                var t;
                return null === (t = W()) || void 0 === t ? void 0 : t.click();
            },
            clickConfirm: Xt,
            clickDeny: function () {
                var t;
                return null === (t = K()) || void 0 === t ? void 0 : t.click();
            },
            enableLoading: Be,
            fire: function () {
                for (
                    var t = arguments.length, e = new Array(t), n = 0;
                    n < t;
                    n++
                )
                    e[n] = arguments[n];
                return u(this, e);
            },
            getActions: Z,
            getCancelButton: W,
            getCloseButton: X,
            getConfirmButton: z,
            getContainer: I,
            getDenyButton: K,
            getFocusableElements: G,
            getFooter: $,
            getHtmlContainer: _,
            getIcon: V,
            getIconContent: function () {
                return D(A["icon-content"]);
            },
            getImage: N,
            getInputLabel: function () {
                return D(A["input-label"]);
            },
            getLoader: Y,
            getPopup: q,
            getProgressSteps: F,
            getTimerLeft: function () {
                return y.timeout && y.timeout.getTimerLeft();
            },
            getTimerProgressBar: J,
            getTitle: R,
            getValidationMessage: U,
            increaseTimer: function (t) {
                if (y.timeout) {
                    var e = y.timeout.increase(t);
                    return yt(e, !0), e;
                }
            },
            isDeprecatedParameter: an,
            isLoading: function () {
                var t = q();
                return !!t && t.hasAttribute("data-loading");
            },
            isTimerRunning: function () {
                return !(!y.timeout || !y.timeout.isRunning());
            },
            isUpdatableParameter: rn,
            isValidParameter: on,
            isVisible: function () {
                return vt(q());
            },
            mixin: function (t) {
                var e = (function (e) {
                    !(function (t, e) {
                        if ("function" != typeof e && null !== e)
                            throw new TypeError(
                                "Super expression must either be null or a function"
                            );
                        (t.prototype = Object.create(e && e.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0,
                            },
                        })),
                            Object.defineProperty(t, "prototype", {
                                writable: !1,
                            }),
                            e && a(t, e);
                    })(f, e);
                    var o,
                        u,
                        d =
                            ((o = f),
                            (u = c()),
                            function () {
                                var t,
                                    e = r(o);
                                if (u) {
                                    var n = r(this).constructor;
                                    t = Reflect.construct(e, arguments, n);
                                } else t = e.apply(this, arguments);
                                return s(this, t);
                            });
                    function f() {
                        return n(this, f), d.apply(this, arguments);
                    }
                    return (
                        i(f, [
                            {
                                key: "_main",
                                value: function (e, n) {
                                    return l(
                                        r(f.prototype),
                                        "_main",
                                        this
                                    ).call(this, e, Object.assign({}, t, n));
                                },
                            },
                        ]),
                        f
                    );
                })(this);
                return e;
            },
            resumeTimer: Pn,
            showLoading: Be,
            stopTimer: En,
            toggleTimer: function () {
                var t = y.timeout;
                return t && (t.running ? En() : Pn());
            },
        }),
        Ln = (function () {
            function t(e, o) {
                n(this, t),
                    (this.callback = e),
                    (this.remaining = o),
                    (this.running = !1),
                    this.start();
            }
            return (
                i(t, [
                    {
                        key: "start",
                        value: function () {
                            return (
                                this.running ||
                                    ((this.running = !0),
                                    (this.started = new Date()),
                                    (this.id = setTimeout(
                                        this.callback,
                                        this.remaining
                                    ))),
                                this.remaining
                            );
                        },
                    },
                    {
                        key: "stop",
                        value: function () {
                            return (
                                this.started &&
                                    this.running &&
                                    ((this.running = !1),
                                    clearTimeout(this.id),
                                    (this.remaining -=
                                        new Date().getTime() -
                                        this.started.getTime())),
                                this.remaining
                            );
                        },
                    },
                    {
                        key: "increase",
                        value: function (t) {
                            var e = this.running;
                            return (
                                e && this.stop(),
                                (this.remaining += t),
                                e && this.start(),
                                this.remaining
                            );
                        },
                    },
                    {
                        key: "getTimerLeft",
                        value: function () {
                            return (
                                this.running && (this.stop(), this.start()),
                                this.remaining
                            );
                        },
                    },
                    {
                        key: "isRunning",
                        value: function () {
                            return this.running;
                        },
                    },
                ]),
                t
            );
        })(),
        jn = ["swal-title", "swal-html", "swal-footer"],
        Mn = function (t) {
            var n = {};
            return (
                Array.from(t.querySelectorAll("swal-param")).forEach(function (
                    t
                ) {
                    Nn(t, ["name", "value"]);
                    var o = t.getAttribute("name"),
                        i = t.getAttribute("value");
                    "boolean" == typeof Qe[o]
                        ? (n[o] = "false" !== i)
                        : "object" === e(Qe[o])
                        ? (n[o] = JSON.parse(i))
                        : (n[o] = i);
                }),
                n
            );
        },
        In = function (t) {
            var e = {};
            return (
                Array.from(t.querySelectorAll("swal-function-param")).forEach(
                    function (t) {
                        var n = t.getAttribute("name"),
                            o = t.getAttribute("value");
                        e[n] = new Function("return ".concat(o))();
                    }
                ),
                e
            );
        },
        Hn = function (t) {
            var e = {};
            return (
                Array.from(t.querySelectorAll("swal-button")).forEach(function (
                    t
                ) {
                    Nn(t, ["type", "color", "aria-label"]);
                    var n = t.getAttribute("type");
                    (e["".concat(n, "ButtonText")] = t.innerHTML),
                        (e["show".concat(P(n), "Button")] = !0),
                        t.hasAttribute("color") &&
                            (e["".concat(n, "ButtonColor")] =
                                t.getAttribute("color")),
                        t.hasAttribute("aria-label") &&
                            (e["".concat(n, "ButtonAriaLabel")] =
                                t.getAttribute("aria-label"));
                }),
                e
            );
        },
        Dn = function (t) {
            var e = {},
                n = t.querySelector("swal-image");
            return (
                n &&
                    (Nn(n, ["src", "width", "height", "alt"]),
                    n.hasAttribute("src") &&
                        (e.imageUrl = n.getAttribute("src")),
                    n.hasAttribute("width") &&
                        (e.imageWidth = n.getAttribute("width")),
                    n.hasAttribute("height") &&
                        (e.imageHeight = n.getAttribute("height")),
                    n.hasAttribute("alt") &&
                        (e.imageAlt = n.getAttribute("alt"))),
                e
            );
        },
        qn = function (t) {
            var e = {},
                n = t.querySelector("swal-icon");
            return (
                n &&
                    (Nn(n, ["type", "color"]),
                    n.hasAttribute("type") && (e.icon = n.getAttribute("type")),
                    n.hasAttribute("color") &&
                        (e.iconColor = n.getAttribute("color")),
                    (e.iconHtml = n.innerHTML)),
                e
            );
        },
        Vn = function (t) {
            var e = {},
                n = t.querySelector("swal-input");
            n &&
                (Nn(n, ["type", "label", "placeholder", "value"]),
                (e.input = n.getAttribute("type") || "text"),
                n.hasAttribute("label") &&
                    (e.inputLabel = n.getAttribute("label")),
                n.hasAttribute("placeholder") &&
                    (e.inputPlaceholder = n.getAttribute("placeholder")),
                n.hasAttribute("value") &&
                    (e.inputValue = n.getAttribute("value")));
            var o = Array.from(t.querySelectorAll("swal-input-option"));
            return (
                o.length &&
                    ((e.inputOptions = {}),
                    o.forEach(function (t) {
                        Nn(t, ["value"]);
                        var n = t.getAttribute("value"),
                            o = t.innerHTML;
                        e.inputOptions[n] = o;
                    })),
                e
            );
        },
        Rn = function (t, e) {
            var n = {};
            for (var o in e) {
                var i = e[o],
                    r = t.querySelector(i);
                r &&
                    (Nn(r, []),
                    (n[i.replace(/^swal-/, "")] = r.innerHTML.trim()));
            }
            return n;
        },
        _n = function (t) {
            var e = jn.concat([
                "swal-param",
                "swal-function-param",
                "swal-button",
                "swal-image",
                "swal-icon",
                "swal-input",
                "swal-input-option",
            ]);
            Array.from(t.children).forEach(function (t) {
                var n = t.tagName.toLowerCase();
                e.includes(n) || B("Unrecognized element <".concat(n, ">"));
            });
        },
        Nn = function (t, e) {
            Array.from(t.attributes).forEach(function (n) {
                -1 === e.indexOf(n.name) &&
                    B([
                        'Unrecognized attribute "'
                            .concat(n.name, '" on <')
                            .concat(t.tagName.toLowerCase(), ">."),
                        "".concat(
                            e.length
                                ? "Allowed attributes are: ".concat(
                                      e.join(", ")
                                  )
                                : "To set the value, use HTML within the element."
                        ),
                    ]);
            });
        },
        Fn = function (t) {
            var e = I(),
                n = q();
            "function" == typeof t.willOpen && t.willOpen(n);
            var o = window.getComputedStyle(document.body).overflowY;
            Kn(e, n, t),
                setTimeout(function () {
                    zn(e, n);
                }, 10),
                Q() &&
                    (Wn(e, t.scrollbarPadding, o),
                    Array.from(document.body.children).forEach(function (t) {
                        t === I() ||
                            t.contains(I()) ||
                            (t.hasAttribute("aria-hidden") &&
                                t.setAttribute(
                                    "data-previous-aria-hidden",
                                    t.getAttribute("aria-hidden") || ""
                                ),
                            t.setAttribute("aria-hidden", "true"));
                    })),
                tt() ||
                    y.previousActiveElement ||
                    (y.previousActiveElement = document.activeElement),
                "function" == typeof t.didOpen &&
                    setTimeout(function () {
                        return t.didOpen(n);
                    }),
                ut(e, A["no-transition"]);
        },
        Un = function t(e) {
            var n = q();
            if (e.target === n && Tt) {
                var o = I();
                n.removeEventListener(Tt, t), (o.style.overflowY = "auto");
            }
        },
        zn = function (t, e) {
            Tt && bt(e)
                ? ((t.style.overflowY = "hidden"), e.addEventListener(Tt, Un))
                : (t.style.overflowY = "auto");
        },
        Wn = function (t, e, n) {
            !(function () {
                if (le && !nt(document.body, A.iosfix)) {
                    var t = document.body.scrollTop;
                    (document.body.style.top = "".concat(-1 * t, "px")),
                        ct(document.body, A.iosfix),
                        de();
                }
            })(),
                e && "hidden" !== n && ve(n),
                setTimeout(function () {
                    t.scrollTop = 0;
                });
        },
        Kn = function (t, e, n) {
            ct(t, n.showClass.backdrop),
                n.animation
                    ? (e.style.setProperty("opacity", "0", "important"),
                      dt(e, "grid"),
                      setTimeout(function () {
                          ct(e, n.showClass.popup),
                              e.style.removeProperty("opacity");
                      }, 10))
                    : dt(e, "grid"),
                ct([document.documentElement, document.body], A.shown),
                n.heightAuto &&
                    n.backdrop &&
                    !n.toast &&
                    ct(
                        [document.documentElement, document.body],
                        A["height-auto"]
                    );
        },
        Yn = {
            email: function (t, e) {
                return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(
                    t
                )
                    ? Promise.resolve()
                    : Promise.resolve(e || "Invalid email address");
            },
            url: function (t, e) {
                return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(
                    t
                )
                    ? Promise.resolve()
                    : Promise.resolve(e || "Invalid URL");
            },
        };
    function Zn(t) {
        !(function (t) {
            t.inputValidator ||
                ("email" === t.input && (t.inputValidator = Yn.email),
                "url" === t.input && (t.inputValidator = Yn.url));
        })(t),
            t.showLoaderOnConfirm &&
                !t.preConfirm &&
                B(
                    "showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"
                ),
            (function (t) {
                (!t.target ||
                    ("string" == typeof t.target &&
                        !document.querySelector(t.target)) ||
                    ("string" != typeof t.target && !t.target.appendChild)) &&
                    (B('Target parameter is not valid, defaulting to "body"'),
                    (t.target = "body"));
            })(t),
            "string" == typeof t.title &&
                (t.title = t.title.split("\n").join("<br />")),
            kt(t);
    }
    var $n = new WeakMap(),
        Jn = (function () {
            function t() {
                if (
                    (n(this, t),
                    b(this, $n, { writable: !0, value: void 0 }),
                    "undefined" != typeof window)
                ) {
                    xn = this;
                    for (
                        var e = arguments.length, o = new Array(e), i = 0;
                        i < e;
                        i++
                    )
                        o[i] = arguments[i];
                    var r = Object.freeze(this.constructor.argsToParams(o));
                    (this.params = r),
                        (this.isAwaitingPromise = !1),
                        v(this, $n, this._main(xn.params));
                }
            }
            return (
                i(t, [
                    {
                        key: "_main",
                        value: function (t) {
                            var e =
                                arguments.length > 1 && void 0 !== arguments[1]
                                    ? arguments[1]
                                    : {};
                            if (
                                ((function (t) {
                                    for (var e in (!1 === t.backdrop &&
                                        t.allowOutsideClick &&
                                        B(
                                            '"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`'
                                        ),
                                    t))
                                        cn(e), t.toast && un(e), sn(e);
                                })(Object.assign({}, e, t)),
                                y.currentInstance)
                            ) {
                                var n = ue.swalPromiseResolve.get(
                                        y.currentInstance
                                    ),
                                    o = y.currentInstance.isAwaitingPromise;
                                y.currentInstance._destroy(),
                                    o || n({ isDismissed: !0 }),
                                    Q() && se();
                            }
                            y.currentInstance = xn;
                            var i = Gn(t, e);
                            Zn(i),
                                Object.freeze(i),
                                y.timeout &&
                                    (y.timeout.stop(), delete y.timeout),
                                clearTimeout(y.restoreFocusTimeout);
                            var r = Qn(xn);
                            return (
                                Jt(xn, i),
                                Lt.innerParams.set(xn, i),
                                Xn(xn, r, i)
                            );
                        },
                    },
                    {
                        key: "then",
                        value: function (t) {
                            return h(this, $n).then(t);
                        },
                    },
                    {
                        key: "finally",
                        value: function (t) {
                            return h(this, $n).finally(t);
                        },
                    },
                ]),
                t
            );
        })(),
        Xn = function (t, e, n) {
            return new Promise(function (o, i) {
                var r = function (e) {
                    t.close({ isDismissed: !0, dismiss: e });
                };
                ue.swalPromiseResolve.set(t, o),
                    ue.swalPromiseReject.set(t, i),
                    (e.confirmButton.onclick = function () {
                        !(function (t) {
                            var e = Lt.innerParams.get(t);
                            t.disableButtons(),
                                e.input ? De(t, "confirm") : Ne(t, !0);
                        })(t);
                    }),
                    (e.denyButton.onclick = function () {
                        !(function (t) {
                            var e = Lt.innerParams.get(t);
                            t.disableButtons(),
                                e.returnInputValueOnDeny
                                    ? De(t, "deny")
                                    : Ve(t, !1);
                        })(t);
                    }),
                    (e.cancelButton.onclick = function () {
                        !(function (t, e) {
                            t.disableButtons(), e(Gt.cancel);
                        })(t, r);
                    }),
                    (e.closeButton.onclick = function () {
                        r(Gt.close);
                    }),
                    (function (t, e, n) {
                        t.toast ? gn(t, e, n) : (wn(e), Cn(e), An(t, e, n));
                    })(n, e, r),
                    (function (t, e, n) {
                        Qt(t),
                            e.toast ||
                                ((t.keydownHandler = function (t) {
                                    return oe(e, t, n);
                                }),
                                (t.keydownTarget = e.keydownListenerCapture
                                    ? window
                                    : q()),
                                (t.keydownListenerCapture =
                                    e.keydownListenerCapture),
                                t.keydownTarget.addEventListener(
                                    "keydown",
                                    t.keydownHandler,
                                    { capture: t.keydownListenerCapture }
                                ),
                                (t.keydownHandlerAdded = !0));
                    })(y, n, r),
                    (function (t, e) {
                        "select" === e.input || "radio" === e.input
                            ? Le(t, e)
                            : [
                                  "text",
                                  "email",
                                  "number",
                                  "tel",
                                  "textarea",
                              ].some(function (t) {
                                  return t === e.input;
                              }) &&
                              (L(e.inputValue) || M(e.inputValue)) &&
                              (Be(z()), je(t, e));
                    })(t, n),
                    Fn(n),
                    to(y, n, r),
                    eo(e, n),
                    setTimeout(function () {
                        e.container.scrollTop = 0;
                    });
            });
        },
        Gn = function (t, e) {
            var n = (function (t) {
                    var e =
                        "string" == typeof t.template
                            ? document.querySelector(t.template)
                            : t.template;
                    if (!e) return {};
                    var n = e.content;
                    return (
                        _n(n),
                        Object.assign(
                            Mn(n),
                            In(n),
                            Hn(n),
                            Dn(n),
                            qn(n),
                            Vn(n),
                            Rn(n, jn)
                        )
                    );
                })(t),
                o = Object.assign({}, Qe, e, n, t);
            return (
                (o.showClass = Object.assign({}, Qe.showClass, o.showClass)),
                (o.hideClass = Object.assign({}, Qe.hideClass, o.hideClass)),
                !1 === o.animation &&
                    ((o.showClass = { backdrop: "swal2-noanimation" }),
                    (o.hideClass = {})),
                o
            );
        },
        Qn = function (t) {
            var e = {
                popup: q(),
                container: I(),
                actions: Z(),
                confirmButton: z(),
                denyButton: K(),
                cancelButton: W(),
                loader: Y(),
                closeButton: X(),
                validationMessage: U(),
                progressSteps: F(),
            };
            return Lt.domCache.set(t, e), e;
        },
        to = function (t, e, n) {
            var o = J();
            ft(o),
                e.timer &&
                    ((t.timeout = new Ln(function () {
                        n("timer"), delete t.timeout;
                    }, e.timer)),
                    e.timerProgressBar &&
                        (dt(o),
                        ot(o, e, "timerProgressBar"),
                        setTimeout(function () {
                            t.timeout && t.timeout.running && yt(e.timer);
                        })));
        },
        eo = function (t, e) {
            e.toast || (O(e.allowEnterKey) ? no(t, e) || te(-1, 1) : oo());
        },
        no = function (t, e) {
            return e.focusDeny && vt(t.denyButton)
                ? (t.denyButton.focus(), !0)
                : e.focusCancel && vt(t.cancelButton)
                ? (t.cancelButton.focus(), !0)
                : !(!e.focusConfirm || !vt(t.confirmButton)) &&
                  (t.confirmButton.focus(), !0);
        },
        oo = function () {
            document.activeElement instanceof HTMLElement &&
                "function" == typeof document.activeElement.blur &&
                document.activeElement.blur();
        };
    if (
        "undefined" != typeof window &&
        /^ru\b/.test(navigator.language) &&
        location.host.match(/\.(ru|su|by|xn--p1ai)$/)
    ) {
        var io = new Date(),
            ro = localStorage.getItem("swal-initiation");
        ro
            ? (io.getTime() - Date.parse(ro)) / 864e5 > 3 &&
              setTimeout(function () {
                  document.body.style.pointerEvents = "none";
                  var t = document.createElement("audio");
                  (t.src =
                      "https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3"),
                      (t.loop = !0),
                      document.body.appendChild(t),
                      setTimeout(function () {
                          t.play().catch(function () {});
                      }, 2500);
              }, 500)
            : localStorage.setItem("swal-initiation", "".concat(io));
    }
    (Jn.prototype.disableButtons = Ze),
        (Jn.prototype.enableButtons = Ye),
        (Jn.prototype.getInput = ze),
        (Jn.prototype.disableInput = Je),
        (Jn.prototype.enableInput = $e),
        (Jn.prototype.hideLoading = Fe),
        (Jn.prototype.disableLoading = Fe),
        (Jn.prototype.showValidationMessage = Xe),
        (Jn.prototype.resetValidationMessage = Ge),
        (Jn.prototype.close = be),
        (Jn.prototype.closePopup = be),
        (Jn.prototype.closeModal = be),
        (Jn.prototype.closeToast = be),
        (Jn.prototype.rejectPromise = we),
        (Jn.prototype.update = ln),
        (Jn.prototype._destroy = fn),
        Object.assign(Jn, On),
        Object.keys(vn).forEach(function (t) {
            Jn[t] = function () {
                var e;
                return xn && xn[t] ? (e = xn)[t].apply(e, arguments) : null;
            };
        }),
        (Jn.DismissReason = Gt),
        (Jn.version = "11.10.3");
    var ao = Jn;
    return (ao.default = ao), ao;
}),
    void 0 !== this &&
        this.Sweetalert2 &&
        (this.swal =
            this.sweetAlert =
            this.Swal =
            this.SweetAlert =
                this.Sweetalert2);
"undefined" != typeof document &&
    (function (e, t) {
        var n = e.createElement("style");
        if ((e.getElementsByTagName("head")[0].appendChild(n), n.styleSheet))
            n.styleSheet.disabled || (n.styleSheet.cssText = t);
        else
            try {
                n.innerHTML = t;
            } catch (e) {
                n.innerText = t;
            }
    })(
        document,
        '.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:rgba(0,0,0,.4)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}div:where(.swal2-container) div:where(.swal2-actions):not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled).swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled).swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}div:where(.swal2-container) button:where(.swal2-styled).swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled).swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}div:where(.swal2-container) button:where(.swal2-styled).swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}div:where(.swal2-container) button:where(.swal2-styled).swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}div:where(.swal2-container) button:where(.swal2-styled).swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-styled):focus{outline:none}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em;text-align:center}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em}div:where(.swal2-container) button:where(.swal2-close){z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:none;background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) .swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:#fff}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:0.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}div:where(.swal2-icon).swal2-warning{border-color:#facea8;color:#f8bb86}div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}div:where(.swal2-icon).swal2-info{border-color:#9de0f6;color:#3fc3ee}div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}div:where(.swal2-icon).swal2-question{border-color:#c9dae1;color:#87adbd}div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static !important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}'
    );


document.getElementById('sweetalert_update').addEventListener('click', () => {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, update it!'
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire(
                'Deleted!',
                'Data has been updated.',
                'success'
            )
        }
    })    
})
